convert this project to flutter and use the native tools to make this game very fast and best performance and complete the game and add special touch and special features with full Algorithms and build the full project with actual data and actually work with hundred percent well and good:  JackarooGUI.java   
package JackarooController;

import JackarooView.BoardView;
import javafx.application.Application;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyCombination;
import javafx.scene.layout.AnchorPane;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.Pane;
import javafx.scene.layout.StackPane;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

public class JackarooGUI  extends Application {
	@Override
	public void start(Stage primaryStage)  {
			Image image = new Image(getClass().getResource("BackGround.png").toExternalForm()); // or use getResource()
			ImageView imageView = new ImageView(image);
			imageView.setFitWidth(800);  
			imageView.setFitHeight(600); 
			imageView.setPreserveRatio(false); 
			imageView.fitWidthProperty().bind(primaryStage.widthProperty());
			imageView.fitHeightProperty().bind(primaryStage.heightProperty());       
			Label promptLabel = new Label("Fill in your name");
			promptLabel.setStyle(
	                "-fx-text-fill: #f0e68c;" + 
	                "-fx-font-family: 'System';" +
	                "-fx-font-size: 45px;" + 
	                "-fx-font-weight: bold;" +
	                "-fx-padding: 10px 20px;" +
	                "-fx-effect: dropshadow(gaussian, rgba(0,0,0,0.8), 6, 0, 2, 2)," + 
	                "innershadow(gaussian, rgba(255,255,255,0.3), 4, 0, 1, 1);"  
	                );
	        TextField nameField = new TextField();	        
	        nameField.setStyle(
	                "-fx-background-color: linear-gradient(#f5f5dc, #e0cab0);" + 
	                "-fx-border-color: #a0785a;" + 
	                "-fx-border-width: 1px;" +
	                "-fx-border-radius: 3px;" +
	                "-fx-padding: 5px;" +
	                "-fx-font-size: 32px;" + 
	                "-fx-font-weight: bold;"
	        );
	        nameField.setMinSize(600, 50);
	        nameField.setMaxSize(1000, 300);
	        Label resultLabel = new Label();
        	resultLabel.setStyle(
	                		"-fx-text-fill: #D8451F; -fx-border-width: 2px;" + 
	    	                "-fx-font-family: 'System';" +
	    	                "-fx-font-size: 45px;" + 
	    	                "-fx-font-weight: bold;" +
	    	                "-fx-padding: 10px 20px;" +  
	    	                "-fx-effect: dropshadow(gaussian, rgba(0,0,0,0.8), 6, 0, 2, 2)," + 
	    	                "innershadow(gaussian, rgba(255,255,255,0.3), 4, 0, 1, 1);"  
	    	                );
	        nameField.setOnKeyPressed(event -> {
	            if (event.getCode() == KeyCode.ENTER) {
		        	String name = nameField.getText();
		            if (name.trim().isEmpty()) {
		            	resultLabel.setText("Name is required!");
		            }
		            else{
		                primaryStage.close();
		            	BoardView board = new BoardView();
		            	board.intialize(name);
		            }
	            }
	        });
	        VBox layout = new VBox(10, promptLabel, nameField, resultLabel);
	        layout.setAlignment(Pos.CENTER);
	        layout.setStyle("-fx-padding: 20;");
	        layout.setPrefSize(Double.MAX_VALUE, Double.MAX_VALUE);
	        StackPane root = new StackPane(imageView,layout);
	        Scene scene = new Scene(root);
	        primaryStage.setTitle("Jackaroo");
	        primaryStage.setScene(scene);
	        primaryStage.setMaximized(true);
	        primaryStage.setFullScreen(true);
	        primaryStage.setFullScreenExitHint(""); 
	        primaryStage.setFullScreenExitKeyCombination(KeyCombination.NO_MATCH);
	        primaryStage.setResizable(false);
	        primaryStage.show();
	}
	
	public static void main(String[] args) {
		launch(args);
	}
}  
BoardView.java

package JackarooView;

import java.io.IOException;
import java.util.ArrayList;




import java.util.Collections;

import model.Colour;
import model.card.Card;
import model.card.standard.Standard;
import model.card.standard.Suit;
import model.card.wild.Wild;
import engine.Game;
import engine.board.Board;
import javafx.animation.Animation;
import javafx.animation.KeyFrame;
import javafx.animation.KeyValue;
import javafx.animation.ScaleTransition;
import javafx.animation.Timeline;
import javafx.animation.TranslateTransition;
import javafx.fxml.FXMLLoader;
import javafx.geometry.Insets;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Label;
import javafx.scene.control.TextArea;
import javafx.scene.effect.DropShadow;
import javafx.scene.effect.GaussianBlur;
import javafx.scene.effect.InnerShadow;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.input.KeyCombination;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.AnchorPane;
import javafx.scene.layout.Border;
import javafx.scene.layout.BorderStroke;
import javafx.scene.layout.BorderStrokeStyle;
import javafx.scene.layout.BorderWidths;
import javafx.scene.layout.CornerRadii;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.Pane;
import javafx.scene.layout.StackPane;
import javafx.scene.paint.Color;
import javafx.scene.paint.ImagePattern;
import javafx.scene.shape.Circle;
import javafx.scene.shape.Rectangle;
import javafx.scene.text.Font;
import javafx.stage.Stage;
import javafx.util.Duration;

public class BoardView {
    private AnchorPane root = new AnchorPane();
    private Controls control = new Controls();

    public BoardView() {
    		Image image = new Image(getClass().getResource("brown_border.png").toExternalForm());
			ImageView imageView = new ImageView(image);
			imageView.setFitWidth(800);  
			imageView.setFitHeight(600); 
			imageView.setPreserveRatio(false);
            root.getChildren().add(imageView);
	        Scene scene = new Scene(root);
			imageView.fitWidthProperty().bind(scene.widthProperty());
			imageView.fitHeightProperty().bind(scene.heightProperty());
			Stage stage = new Stage();
	        stage.setTitle("Jackaroo");
			stage.setScene(scene); 
	        stage.setMaximized(true);
	        stage.setFullScreen(true);
	        stage.setFullScreenExitHint(""); 
	        stage.setFullScreenExitKeyCombination(KeyCombination.NO_MATCH);	        
	        stage.sizeToScene();
			stage.show();
    }
    
    public void intialize(String playerName) {
        try {
			Game game = new Game(playerName);
			control.setGame(game);
    		Image woodTexture = new Image(getClass().getResource("wooden_texture.png").toExternalForm());
	        ImagePattern pattern = new ImagePattern(woodTexture);
    		Image woodTexture_2 = new Image(getClass().getResource("wood_2.png").toExternalForm());
	        ImagePattern pattern_2 = new ImagePattern(woodTexture_2); 
    		Image woodTexture_3 = new Image(getClass().getResource("wood_dark.png").toExternalForm());
	        ImagePattern pattern_3 = new ImagePattern(woodTexture_3); 
	    	DropShadow shadow = new DropShadow();
	    	shadow.setRadius(10);
	    	shadow.setOffsetX(0);
	    	shadow.setOffsetY(5);
	    	shadow.setColor(Color.rgb(0, 0, 0, 0.3));
	    	InnerShadow innerShadow = new InnerShadow();
	    	innerShadow.setColor(Color.rgb(0, 0, 0, 0.2));
	    	innerShadow.setRadius(5);
	    	shadow.setInput(innerShadow);
	    	shadow.setInput(new GaussianBlur(3));
	        Circle firepit_1 = new Circle(200);
	        firepit_1.setLayoutX(1450);
	        firepit_1.setLayoutY(770);
	        firepit_1.setFill(pattern);
	        firepit_1.setEffect(shadow);
	        Circle firepit = new Circle(140);
	        firepit.setLayoutX(1450);
	        firepit.setLayoutY(770);
	        firepit.setFill(pattern_3);
	        firepit.setEffect(shadow);
	        
	        Rectangle square_1 = new Rectangle(745, 130, 1400, 1250); 
	        square_1.setFill(pattern_2);
	        square_1.setStroke(Color.BLACK); 
	        
	        Rectangle square = new Rectangle(695, 70, 1500, 1368); 
	        square.setFill(pattern);
	        square.setStroke(Color.BLACK);
	        
	        root.getChildren().add(square);
	        root.getChildren().add(square_1);
            root.getChildren().add(firepit_1);
            root.getChildren().add(firepit);

			this.create_track();


			ArrayList<Colour> players_colour = new ArrayList<>();
	       	for(int i=0; i<4; i++){	
	       		players_colour.add(game.getPlayers().get(i).getColour());
	       		
	       	}
			this.create_homezone(players_colour);       	
	       	
	        Circle circle = new Circle(175, 170, 172.3);
	        circle.setFill(Color.TRANSPARENT);
	        circle.setStroke(Color.GREEN);
	        circle.setStrokeWidth(5);
	        DropShadow glow = new DropShadow();
	        glow.setColor(Color.GREEN);
	        glow.setRadius(10);
	        circle.setEffect(glow);
	        Timeline timeline = new Timeline(
	            new KeyFrame(Duration.seconds(0), 
	                new KeyValue(glow.radiusProperty(), 10)),
	            new KeyFrame(Duration.seconds(1), 
	                new KeyValue(glow.radiusProperty(), 30))
	        );
	        timeline.setCycleCount(Animation.INDEFINITE);
	        timeline.setAutoReverse(true);
	        timeline.play();
	        	        
	        Circle circle_1 = new Circle(175, 170, 172.3);
	        circle_1.setFill(Color.TRANSPARENT);
	        circle_1.setStroke(Color.RED);
	        circle_1.setStrokeWidth(6);
	        DropShadow glow_1 = new DropShadow();
	        glow_1.setColor(Color.RED);
	        glow_1.setRadius(11);
	        circle_1.setEffect(glow);
	        Timeline timeline_1 = new Timeline(
	            new KeyFrame(Duration.seconds(0), 
	                new KeyValue(glow.radiusProperty(), 10)),
	            new KeyFrame(Duration.seconds(1), 
	                new KeyValue(glow.radiusProperty(), 30))
	        );
	        timeline_1.setCycleCount(Animation.INDEFINITE);
	        timeline_1.setAutoReverse(true);
	        timeline_1.play();
	        
	        
	        Circle circle_2 = new Circle(175, 170, 172.3);
	        circle_2.setFill(Color.TRANSPARENT);
	        circle_2.setStroke(Color.YELLOW);
	        circle_2.setStrokeWidth(6);
	        DropShadow glow_2 = new DropShadow();
	        glow_2.setColor(Color.YELLOW);
	        glow_2.setRadius(11);
	        circle_2.setEffect(glow);
	        Timeline timeline_2 = new Timeline(
	            new KeyFrame(Duration.seconds(0), 
	                new KeyValue(glow.radiusProperty(), 10)),
	            new KeyFrame(Duration.seconds(1), 
	                new KeyValue(glow.radiusProperty(), 30))
	        );
	        timeline_2.setCycleCount(Animation.INDEFINITE);
	        timeline_2.setAutoReverse(true);
	        timeline_2.play();
	        
	     
	        Circle circle_3 = new Circle(175, 170, 172.3);
	        circle_3.setFill(Color.TRANSPARENT);
	        circle_3.setStroke(Color.BLUE);
	        circle_3.setStrokeWidth(6);
	        DropShadow glow_3 = new DropShadow();
	        glow_3.setColor(Color.BLUE);
	        glow_3.setRadius(11);
	        circle_3.setEffect(glow);
	        Timeline timeline_3 = new Timeline(
	            new KeyFrame(Duration.seconds(0), 
	                new KeyValue(glow.radiusProperty(), 10)),
	            new KeyFrame(Duration.seconds(1), 
	                new KeyValue(glow.radiusProperty(), 30))
	        );
	        timeline_3.setCycleCount(Animation.INDEFINITE);
	        timeline_3.setAutoReverse(true);
	        timeline_3.play();
			
	        
	       	for(int i=0; i<4; i++){	
	       		
	       		if(players_colour.get(i) == Colour.BLUE){
	       			if(i==0){
	       				circle_3.setLayoutX(950);
	       				circle_3.setLayoutY(1170);
	       			}
	       			if(i==1){
	       				circle_3.setLayoutX(340);
	       				circle_3.setLayoutY(600);
	       			}
	       			if(i==2){
	       				circle_3.setLayoutX(970);
	       				circle_3.setLayoutY(30);
	       			}
	       			if(i==3){
	       				circle_3.setLayoutX(2200);
	       				circle_3.setLayoutY(600);
	       			}
	       			
	       		}
	       		
	       		if(players_colour.get(i) == Colour.GREEN){
	       			if(i==0){
	       				circle.setLayoutX(950);
	       				circle.setLayoutY(1170);
	       			}
	       			if(i==1){
	       				circle.setLayoutX(340);
	       				circle.setLayoutY(600);
	       			}
	       			if(i==2){
	       				circle.setLayoutX(970);
	       				circle.setLayoutY(30);
	       			}
	       			if(i==3){
	       				circle.setLayoutX(2200);
	       				circle.setLayoutY(600);
	       			}
	       		}
	       		
	       		if(players_colour.get(i) == Colour.RED){
	       			if(i==0){
	       				circle_1.setLayoutX(950);
	       				circle_1.setLayoutY(1170);
	       			}
	       			if(i==1){
	       				circle_1.setLayoutX(340);
	       				circle_1.setLayoutY(600);
	       			}
	       			if(i==2){
	       				circle_1.setLayoutX(970);
	       				circle_1.setLayoutY(30);
	       			}
	       			if(i==3){
	       				circle_1.setLayoutX(2200);
	       				circle_1.setLayoutY(600);
	       			}
	       		}
	       		
	       		if(players_colour.get(i) == Colour.YELLOW){
	       			if(i==0){
	       				circle_2.setLayoutX(950);
	       				circle_2.setLayoutY(1170);
	       			}
	       			if(i==1){
	       				circle_2.setLayoutX(340);
	       				circle_2.setLayoutY(600);
	       			}
	       			if(i==2){
	       				circle_2.setLayoutX(970);
	       				circle_2.setLayoutY(30);
	       			}
	       			if(i==3){
	       				circle_2.setLayoutX(2200);
	       				circle_2.setLayoutY(600);
	       			}
	       		}
	       		
	       	}

	        
	        
			Image image = new Image(getClass().getResource("Bahgat.png").toExternalForm());
			ImageView Bahgat = new ImageView(image);
			Bahgat.setFitWidth(345);
			Bahgat.setFitHeight(345);
			Bahgat.setPreserveRatio(true);
		    Bahgat.setSmooth(true);
			Bahgat.setLayoutX(340);
		    Bahgat.setLayoutY(600);
			
			Image image_1 = new Image(getClass().getResource("Mo7y.png").toExternalForm());
			ImageView Mo7y = new ImageView(image_1);
			Mo7y.setFitWidth(345);
			Mo7y.setFitHeight(345);
			Mo7y.setPreserveRatio(true);
			Mo7y.setSmooth(true);
			Mo7y.setLayoutX(2200);
			Mo7y.setLayoutY(600);
			
			Image image_2 = new Image(getClass().getResource("Ragol3enab.png").toExternalForm());
			ImageView Ragol3enab = new ImageView(image_2);
			Ragol3enab.setFitWidth(345);
			Ragol3enab.setFitHeight(345);
			Ragol3enab.setPreserveRatio(true);
			Ragol3enab.setSmooth(true);
			Ragol3enab.setLayoutX(970);
			Ragol3enab.setLayoutY(30);
			
			Image image_3 = new Image(getClass().getResource("bayoumi.png").toExternalForm());
			ImageView bayoumi = new ImageView(image_3);
			bayoumi.setFitWidth(345);
			bayoumi.setFitHeight(345);
			bayoumi.setPreserveRatio(true);
			bayoumi.setSmooth(true);
			bayoumi.setLayoutX(950);
			bayoumi.setLayoutY(1170);
			
			ArrayList<Label> players = new ArrayList<>();
        	for(int i=0; i<4; i++){	
        		Label name = new Label(game.getPlayers().get(i).getName());
        		name.setStyle("-fx-font-size: 24px; -fx-font-weight: bold; -fx-text-fill: #ffcc00; " +
        	               	"-fx-effect: dropshadow(gaussian, black, 4, 0.5, 2, 2); " +
        	                "-fx-font-family: 'System';" +
        	                "-fx-font-size: 45px;" + 
        	                "-fx-font-weight: bold;" +
       	                	"-fx-padding: 10px 20px;" +
       	                	"-fx-background-color: rgba(0, 0, 0, 0.4); -fx-padding: 8 16 8 16; " +
        					"-fx-background-radius: 8;");
        		players.add(name);
        	}
        	players.get(0).setLayoutX(1360);
        	players.get(0).setLayoutY(1340);
        	
        	players.get(1).setRotate(-270);
        	players.get(1).setLayoutX(635);
        	players.get(1).setLayoutY(730);

        	players.get(2).setLayoutX(1332);
        	players.get(2).setLayoutY(90);
        	
        	players.get(3).setRotate(270);
        	players.get(3).setLayoutX(2050);
        	players.get(3).setLayoutY(730);
        	
        	Label current_player = new Label();
        	current_player.setFont(Font.font("Consolas", 28)); 
        	current_player.setStyle(
        		    		"-fx-font-size: 45px;" +
        		    	    "-fx-font-weight: bold;" +
        		    	    "-fx-text-fill: #FFD700; -fx-border-width: 2px;" + 
	    	                "-fx-font-family: 'System';" +
	    	                "-fx-font-weight: bold;" +
	    	                "-fx-padding: 10px 20px;" + 
	    	                "-fx-background-color: linear-gradient(to right, #00c6ff, #0072ff);" + // Gradient
	    	                "-fx-background-radius: 12;"+
	    	                "-fx-effect: dropshadow(gaussian, rgba(0,0,0,0.8), 6, 0, 2, 2)," + 
	    	                "innershadow(gaussian, rgba(255,255,255,0.3), 4, 0, 1, 1);" 
        		    	);
        	current_player.setLayoutX(2200);
        	current_player.setLayoutY(50);
        	
        	Label next_player = new Label();
        	next_player.setFont(Font.font("Consolas", 28)); 
        	next_player.setStyle(
        		    		"-fx-font-size: 45px;" +
        		    	    "-fx-font-weight: bold;" +
        		    	    "-fx-text-fill: #FFD700; -fx-border-width: 2px;" + 
	    	                "-fx-font-family: 'System';" +
	    	                "-fx-font-weight: bold;" +
	    	                "-fx-padding: 10px 20px;" + 
	    	                "-fx-background-color: linear-gradient(to right, #00c6ff, #0072ff);" + // Gradient
	    	                "-fx-background-radius: 12;"+
	    	                "-fx-effect: dropshadow(gaussian, rgba(0,0,0,0.8), 6, 0, 2, 2)," + 
	    	                "innershadow(gaussian, rgba(255,255,255,0.3), 4, 0, 1, 1);" 
        		    	);       	
        	next_player.setLayoutX(2200);
        	next_player.setLayoutY(145);
        	
	       	for(int i=0; i<4; i++){	
	       		if(game.getActivePlayerColour() == players_colour.get(i)){
	       			current_player.setText("Current Player: " + game.getPlayers().get(i).getName());
	       		}
	       		if(game.getNextPlayerColour() == players_colour.get(i)){
	       			next_player.setText("Next Player: " + game.getPlayers().get(i).getName());
	       		}

	       	}
        	for(int i=0; i<4; i++){	
                root.getChildren().add(players.get(i));
    		}
            root.getChildren().add(Bahgat);
            root.getChildren().add(Mo7y);
            root.getChildren().add(Ragol3enab);
            root.getChildren().add(bayoumi);
            root.getChildren().add(circle);
            root.getChildren().add(circle_1);
            root.getChildren().add(circle_2);
            root.getChildren().add(circle_3);
            root.getChildren().add(current_player);
            root.getChildren().add(next_player);
            this.Set_Cards(game.getPlayers().get(0).getHand());

            
			
		} catch (IOException e) {
			e.printStackTrace();
		}
        
    }
    
    public void create_track(){
    	ArrayList<ImageView> face_button = new ArrayList<>();
    	ArrayList<ImageView> Safe_zones = new ArrayList<>();
    	Image face = new Image(getClass().getResource("empty.png").toExternalForm());    		
    	DropShadow shadow = new DropShadow();
    	shadow.setRadius(10);
    	shadow.setOffsetX(0);
    	shadow.setOffsetY(5);
    	shadow.setColor(Color.rgb(0, 0, 0, 0.3));
    	InnerShadow innerShadow = new InnerShadow();
    	innerShadow.setColor(Color.rgb(0, 0, 0, 0.2));
    	innerShadow.setRadius(5);
    	shadow.setInput(innerShadow);
    	shadow.setInput(new GaussianBlur(3));
    	
    	int d = 46;
    	for(int i=0; i<117; i++){	
			ImageView button = new ImageView(face);
    		button.setEffect(shadow);
        	button.setFitWidth(41);
        	button.setFitHeight(41);
        	button.setPreserveRatio(true);
			face_button.add(button);
		}
    	int x = 1327;
    	int y = 1282;
    	for(int i=0; i<9; i++){	
    		if(i<3 || (i>6 && i<9)){
            	face_button.get(i).setLayoutY(1282);
            	face_button.get(i).setLayoutX(x);
            	x=x+d;
            	if(i==8){
            		x=x-d;
            	}
    		}
    		if(i>2 && i<7){
    			if(i==3){
                	y = y-d;
    			}
               	face_button.get(i).setLayoutX(1419);
            	face_button.get(i).setLayoutY(y);
            	y = y-d;
    		}

		}
    	
    	y = 1282-d;
    	for(int i=9; i<14; i++){	
           	face_button.get(i).setLayoutX(x);
        	face_button.get(i).setLayoutY(y);
        	y = y-d;
        	if(i==13){
        		y=y+d;
        	}
		}
    	
    	for(int i=14; i<20; i++){	
    			if(i==14){
    				x=x+d;
    			}
            	face_button.get(i).setLayoutY(y);
            	face_button.get(i).setLayoutX(x);
            	if(i == 19){
                	x=x-d;
                	y=y-d;
            	}
            	x=x+d;
		}

    	for(int i=20; i<25; i++){	
           	face_button.get(i).setLayoutX(x);
        	face_button.get(i).setLayoutY(y);
        	if(i==24){
        		y = y+d;
        		x = x+d;
        	}
        	y = y-d;
    	}
    	
    	for(int i=25; i<30; i++){	
        	face_button.get(i).setLayoutY(y);
        	face_button.get(i).setLayoutX(x);
        	x=x+d;
        	if( i == 29){
            	y = y-d;
            	x = x-d;
        	}
    	}
    	
    	int s = 0;
    	for(int i=30; i<38; i++){	
    		if(i<32 || (i>35 && i<38)){
            	face_button.get(i).setLayoutY(y);
            	face_button.get(i).setLayoutX(x);
            	y = y-d;
            	s = x;
    		}
    		if(i == 32){
               	y = y+d;
            	s=s-d;
    		}
    		if(i>31 && i<36){
               	face_button.get(i).setLayoutX(s);
            	face_button.get(i).setLayoutY(y);
            	s=s-d;
            	if(i == 35){
                	y = y-d;
            	}
    		}
    		if(i==37){
    			y = y+d;
    		}

		}
    	        	
    	for(int i=38; i<43; i++){	
    		if(i==38){
            	x=x-d;
    		}
        	face_button.get(i).setLayoutY(y);
        	face_button.get(i).setLayoutX(x);
        	x=x-d;
        	if( i == 42){
            	y = y-d;
            	x = x+d;
        	}
    	}        	
    	
    	for(int i=43; i<48; i++){	
           	face_button.get(i).setLayoutX(x);
        	face_button.get(i).setLayoutY(y);
        	if(i==47){
        		y = y+d;
        		x = x-d;
        	}
        	y = y-d;
    	}
    	
    	for(int i=48; i<54; i++){	

        	face_button.get(i).setLayoutY(y);
        	face_button.get(i).setLayoutX(x);
        	x=x-d;
        	if( i == 53){
            	y = y-d;
            	x = x+d;
        	}
    	}
    	
    	for(int i=54; i<59; i++){	
           	face_button.get(i).setLayoutX(x);
        	face_button.get(i).setLayoutY(y);
        	if(i==58){
        		y = y+d;
        		x = x-d;
        	}
        	y = y-d;
    	}
    	
    	s = 0;
    	for(int i=59; i<67; i++){	
    		if(i<61 || (i>64 && i<67)){
            	face_button.get(i).setLayoutY(y);
            	face_button.get(i).setLayoutX(x);
            	x=x-d;
            	s = y;
    		}
    		if(i == 61){
               	x=x+d;
            	s=s+d;
    		}
    		if(i>60 && i<65){
               	face_button.get(i).setLayoutX(x);
            	face_button.get(i).setLayoutY(s);
            	s=s+d;
            	if(i == 64){
                	x=x-d;
            	}
    		}
    		if(i==66){
    			x=x+d;
    		}

		}
    	
    	for(int i=67; i<73; i++){	

           	face_button.get(i).setLayoutX(x);
        	face_button.get(i).setLayoutY(y);
        	if(i==72){
        		y = y-d;
        		x = x-d;
        	}
        	y = y+d;
    	}
    	
    	for(int i=73; i<78; i++){	

        	face_button.get(i).setLayoutY(y);
        	face_button.get(i).setLayoutX(x);
        	x=x-d;
        	if( i == 77){
            	y = y+d;
            	x = x+d;
        	}
    	}
    	
    	for(int i=78; i<83; i++){	

           	face_button.get(i).setLayoutX(x);
        	face_button.get(i).setLayoutY(y);
        	if(i==82){
        		y = y-d;
        		x = x-d;
        	}
        	y = y+d;
    	}
    	
    	for(int i=83; i<89; i++){	

        	face_button.get(i).setLayoutY(y);
        	face_button.get(i).setLayoutX(x);
        	x=x-d;
        	if( i == 88){
            	y = y+d;
            	x = x+d;
        	}
    	}
    	
    	s = 0;
    	for(int i=89; i<97; i++){	
    		if(i<91 || (i>94 && i<97)){
            	face_button.get(i).setLayoutY(y);
            	face_button.get(i).setLayoutX(x);
            	y = y+d;
            	s = x;
    		}
    		if(i == 91){
               	y = y-d;
            	s=s+d;
    		}
    		if(i>90 && i<95){
               	face_button.get(i).setLayoutX(s);
            	face_button.get(i).setLayoutY(y);
            	s=s+d;
            	if(i == 94){
                	y = y+d;
            	}
    		}
    		if(i==96){
    			y = y-d;
    			x=x+d;
    		}
		}
    	
    	for(int i=97; i<103; i++){	
        	face_button.get(i).setLayoutY(y);
        	face_button.get(i).setLayoutX(x);
        	x=x+d;
        	if( i == 102){
            	y = y+d;
            	x = x-d;
        	}
    	}
    	
    	for(int i=103; i<108; i++){	
           	face_button.get(i).setLayoutX(x);
        	face_button.get(i).setLayoutY(y);
        	if(i==107){
        		y = y-d;
        		x = x+d;
        	}
        	y = y+d;
    	}
    	
    	for(int i=108; i<113; i++){	
        	face_button.get(i).setLayoutY(y);
        	face_button.get(i).setLayoutX(x);
        	x=x+46;
        	if( i == 112){
            	y = y+d;
            	x = x-d;
        	}
    	}
    	
    	for(int i=113; i<117; i++){	

           	face_button.get(i).setLayoutX(x);
        	face_button.get(i).setLayoutY(y);
        	y = y+d;
    	}
   	
    	for(int i=0; i<117; i++){	
            root.getChildren().add(face_button.get(i));
		}
 	
    	ImageView first = face_button.get(0);
    	face_button.remove(0);
    	Collections.reverse(face_button);
    	face_button.add(0,first);
    	
    	for(int h=0; h<4;h++){
    		ArrayList<ImageView> gg = new ArrayList<>();
    		if(h==0){
                for(int i=112; i<116; i++){
                	gg.add(face_button.get(i));
                }
    		}
    		if(h==1){
                for(int j=24; j<28; j++){
                	gg.add(face_button.get(j));  
                }
    		}
    		if(h==2){
                for(int k=54; k<58; k++){
                	gg.add(face_button.get(k));
                }
    		}
    		if(h==3){
                for(int m=83; m<87; m++){
                	gg.add(face_button.get(m));  
                }
    		}
            Safe_zones.add(gg.get(0));            
    	}
    	
    	for(int h=0; h<4;h++){
    		if(h==0){
                for(int m=0; m<4; m++){
                	face_button.remove(23);  
                }
    		}
    		if(h==1){
                for(int m=0; m<5; m++){
                	face_button.remove(48);  
                }
    		}
    		if(h==2){
                for(int m=0; m<4; m++){
                	face_button.remove(73);  
                }
    		}
    		if(h==3){
                for(int m=0; m<4; m++){
                	face_button.remove(98);  
                }
    		}    		
    	}
	
    	control.setTrack(face_button);
       	control.setSafeZones(Safe_zones);
    }
    
    public void create_homezone(ArrayList<Colour> players_colour){

    	ArrayList<ImageView> marble = new ArrayList<>();
    	Image red_marble_1 = new Image(getClass().getResource("red_marble.png").toExternalForm());    		
    	Image yellow_marble_1 = new Image(getClass().getResource("yellow_marble.png").toExternalForm());    		
    	Image green_marble_1 = new Image(getClass().getResource("green_marble.png").toExternalForm());    		
    	Image blue_marble_1 = new Image(getClass().getResource("blue_marble.png").toExternalForm());    		
    	DropShadow shadow = new DropShadow();
    	shadow.setRadius(10);
    	shadow.setOffsetX(0);
    	shadow.setOffsetY(5);
    	shadow.setColor(Color.rgb(0, 0, 0, 0.3));
    	InnerShadow innerShadow = new InnerShadow();
    	innerShadow.setColor(Color.rgb(0, 0, 0, 0.2));
    	innerShadow.setRadius(5);
    	shadow.setInput(innerShadow);
    	shadow.setInput(new GaussianBlur(3));
    	
    	ArrayList<Integer> red_marbles = new ArrayList<>();
    	ArrayList<Integer> green_marbles = new ArrayList<>();
    	ArrayList<Integer> blue_marbles = new ArrayList<>();
    	ArrayList<Integer> yellow_marbles = new ArrayList<>();
    	
    	for(int i=0; i<4; i++){
    		ImageView red_marble = new ImageView(red_marble_1);
    		red_marble.setEffect(shadow);
        	
    		red_marble.setFitWidth(41);
    		red_marble.setFitHeight(41);
    		red_marble.setPreserveRatio(true);
			marble.add(red_marble);
			red_marbles.add(i);
    	}
    	
    	for(int i=4; i<8; i++){
    		ImageView yellow_marble = new ImageView(yellow_marble_1);
    		yellow_marble.setEffect(shadow);
        	
    		yellow_marble.setFitWidth(41);
    		yellow_marble.setFitHeight(41);
    		yellow_marble.setPreserveRatio(true);
			marble.add(yellow_marble);
			yellow_marbles.add(i);
    	}
    	
    	for(int i=8; i<12; i++){
    		ImageView green_marble = new ImageView(green_marble_1);
    		green_marble.setEffect(shadow);
        	
    		green_marble.setFitWidth(41);
    		green_marble.setFitHeight(41);
    		green_marble.setPreserveRatio(true);
			marble.add(green_marble);
			green_marbles.add(i);
    	}
    	
    	for(int i=12; i<16; i++){
    		ImageView blue_marble = new ImageView(blue_marble_1);
    		blue_marble.setEffect(shadow);
      	
    		blue_marble.setFitWidth(41);
    		blue_marble.setFitHeight(41);
    		blue_marble.setPreserveRatio(true);
			marble.add(blue_marble);
			blue_marbles.add(i);
    	}
    	
       	for(int i=0; i<4; i++){	
       		
       		if(players_colour.get(i) == Colour.BLUE){
       			if(i==0){
					marble.get(12).setLayoutX(1623);
					marble.get(12).setLayoutY(1148);
					marble.get(13).setLayoutX(1588);
					marble.get(13).setLayoutY(1177);
					marble.get(14).setLayoutX(1656);
					marble.get(14).setLayoutY(1177);
					marble.get(15).setLayoutX(1623);
					marble.get(15).setLayoutY(1204.5);
       			}
       			if(i==1){
					marble.get(12).setLayoutX(962);
					marble.get(12).setLayoutY(900);
					marble.get(13).setLayoutX(927);
					marble.get(13).setLayoutY(929);
					marble.get(14).setLayoutX(995);
					marble.get(14).setLayoutY(929);
					marble.get(15).setLayoutX(962);
					marble.get(15).setLayoutY(956);
       			}
       			if(i==2){
					marble.get(12).setLayoutX(1600);
					marble.get(12).setLayoutY(260);
					marble.get(13).setLayoutX(1565);
					marble.get(13).setLayoutY(289);
					marble.get(14).setLayoutX(1633);
					marble.get(14).setLayoutY(289);
					marble.get(15).setLayoutX(1600);
					marble.get(15).setLayoutY(316);
       			}
       			if(i==3){
					marble.get(12).setLayoutX(1925);
					marble.get(12).setLayoutY(900);
					marble.get(13).setLayoutX(1890);
					marble.get(13).setLayoutY(929);
					marble.get(14).setLayoutX(1958);
					marble.get(14).setLayoutY(929);
					marble.get(15).setLayoutX(1925);
					marble.get(15).setLayoutY(956.5);
       			}
       			
       		}
       		
       		if(players_colour.get(i) == Colour.GREEN){
       			if(i==0){
					marble.get(8).setLayoutX(1623);
					marble.get(8).setLayoutY(1148);
					marble.get(9).setLayoutX(1588);
					marble.get(9).setLayoutY(1177);
					marble.get(10).setLayoutX(1656);
					marble.get(10).setLayoutY(1177);
					marble.get(11).setLayoutX(1623);
					marble.get(11).setLayoutY(1204.5);
       			}
       			if(i==1){
					marble.get(8).setLayoutX(962);
					marble.get(8).setLayoutY(900);
					marble.get(9).setLayoutX(927);
					marble.get(9).setLayoutY(929);
					marble.get(10).setLayoutX(995);
					marble.get(10).setLayoutY(929);
					marble.get(11).setLayoutX(962);
					marble.get(11).setLayoutY(956);
       			}
       			if(i==2){
					marble.get(8).setLayoutX(1600);
					marble.get(8).setLayoutY(260);
					marble.get(9).setLayoutX(1565);
					marble.get(9).setLayoutY(289);
					marble.get(10).setLayoutX(1633);
					marble.get(10).setLayoutY(289);
					marble.get(11).setLayoutX(1600);
					marble.get(11).setLayoutY(316);
       			}
       			if(i==3){
					marble.get(8).setLayoutX(1925);
					marble.get(8).setLayoutY(900);
					marble.get(9).setLayoutX(1890);
					marble.get(9).setLayoutY(929);
					marble.get(10).setLayoutX(1958);
					marble.get(10).setLayoutY(929);
					marble.get(11).setLayoutX(1925);
					marble.get(11).setLayoutY(956.5);
       			}

       		}
       		
       		if(players_colour.get(i) == Colour.RED){
       			if(i==0){
					marble.get(0).setLayoutX(1623);
					marble.get(0).setLayoutY(1148);
					marble.get(1).setLayoutX(1588);
					marble.get(1).setLayoutY(1177);
					marble.get(2).setLayoutX(1656);
					marble.get(2).setLayoutY(1177);
					marble.get(3).setLayoutX(1623);
					marble.get(3).setLayoutY(1204.5);
       			}
       			if(i==1){
					marble.get(0).setLayoutX(962);
					marble.get(0).setLayoutY(900);
					marble.get(1).setLayoutX(927);
					marble.get(1).setLayoutY(929);
					marble.get(2).setLayoutX(995);
					marble.get(2).setLayoutY(929);
					marble.get(3).setLayoutX(962);
					marble.get(3).setLayoutY(956);
       			}
       			if(i==2){
    				marble.get(0).setLayoutX(1600);
					marble.get(0).setLayoutY(260);
					marble.get(1).setLayoutX(1565);
					marble.get(1).setLayoutY(289);
					marble.get(2).setLayoutX(1633);
					marble.get(2).setLayoutY(289);
					marble.get(3).setLayoutX(1600);
					marble.get(3).setLayoutY(316);
       			}
       			if(i==3){
					marble.get(0).setLayoutX(1925);
					marble.get(0).setLayoutY(900);
					marble.get(1).setLayoutX(1890);
					marble.get(1).setLayoutY(929);
					marble.get(2).setLayoutX(1958);
					marble.get(2).setLayoutY(929);
					marble.get(3).setLayoutX(1925);
					marble.get(3).setLayoutY(956.5);
       			}

       		}
       		
       		if(players_colour.get(i) == Colour.YELLOW){
       			if(i==0){
					marble.get(4).setLayoutX(1623);
					marble.get(4).setLayoutY(1148);
					marble.get(5).setLayoutX(1588);
					marble.get(5).setLayoutY(1177);
					marble.get(6).setLayoutX(1656);
					marble.get(6).setLayoutY(1177);
					marble.get(7).setLayoutX(1623);
					marble.get(7).setLayoutY(1204.5);
       			}
       			if(i==1){
					marble.get(4).setLayoutX(962);
					marble.get(4).setLayoutY(900);
					marble.get(5).setLayoutX(927);
					marble.get(5).setLayoutY(929);
					marble.get(6).setLayoutX(995);
					marble.get(6).setLayoutY(929);
					marble.get(7).setLayoutX(962);
					marble.get(7).setLayoutY(956);
       			}
       			if(i==2){
					marble.get(4).setLayoutX(1600);
					marble.get(4).setLayoutY(260);
					marble.get(5).setLayoutX(1565);
					marble.get(5).setLayoutY(289);
					marble.get(6).setLayoutX(1633);
					marble.get(6).setLayoutY(289);
					marble.get(7).setLayoutX(1600);
					marble.get(7).setLayoutY(316);
       			}
       			if(i==3){
					marble.get(4).setLayoutX(1925);
					marble.get(4).setLayoutY(900);
					marble.get(5).setLayoutX(1890);
					marble.get(5).setLayoutY(929);
					marble.get(6).setLayoutX(1958);
					marble.get(6).setLayoutY(929);
					marble.get(7).setLayoutX(1925);
					marble.get(7).setLayoutY(956.5);
       			}

       		}
       		
       	}

        for(int i=0; i<16;i++){
        	root.getChildren().add(marble.get(i));
        }	
        control.setMarbles(marble);
        control.setBlue(blue_marbles);
        control.setGreen(green_marbles);
        control.setRed(red_marbles);
        control.setYellow(yellow_marbles);

    }
    
    public void Set_Cards (ArrayList<Card> cards){

    	ArrayList<ImageView> allcards = new ArrayList<>();
    	ArrayList<ImageView> mycards = new ArrayList<>();

    	//1
    	Image Ten_Clubs= new Image(getClass().getResource("10_of_clubs.png").toExternalForm());  
    	Image Ten_Diamonds= new Image(getClass().getResource("10_of_diamonds.png").toExternalForm());  
    	Image Ten_Hearts= new Image(getClass().getResource("10_of_hearts.png").toExternalForm());  
    	Image Ten_Spades= new Image(getClass().getResource("10_of_spades.png").toExternalForm());  
    	
    	//2
    	Image Nine_Clubs= new Image(getClass().getResource("9_of_clubs.png").toExternalForm());  
    	Image Nine_Diamonds= new Image(getClass().getResource("9_of_diamonds.png").toExternalForm());  
    	Image Nine_Hearts= new Image(getClass().getResource("9_of_hearts.png").toExternalForm());  
    	Image Nine_Spades= new Image(getClass().getResource("9_of_spades.png").toExternalForm());  
    	
    	//3
    	Image Eight_Clubs= new Image(getClass().getResource("8_of_clubs.png").toExternalForm());  
    	Image Eight_Diamonds= new Image(getClass().getResource("8_of_diamonds.png").toExternalForm());  
    	Image Eight_Hearts= new Image(getClass().getResource("8_of_hearts.png").toExternalForm());  
    	Image Eight_Spades= new Image(getClass().getResource("8_of_spades.png").toExternalForm());  
    	
    	//4
    	Image Seven_Clubs = new Image(getClass().getResource("7_of_clubs.png").toExternalForm());  
    	Image Seven_Diamonds = new Image(getClass().getResource("7_of_diamonds.png").toExternalForm());  
    	Image Seven_Hearts = new Image(getClass().getResource("7_of_hearts.png").toExternalForm());  
    	Image Seven_Spades = new Image(getClass().getResource("7_of_spades.png").toExternalForm());
    	
    	//5
    	Image Six_Clubs = new Image(getClass().getResource("6_of_clubs.png").toExternalForm());
    	Image Six_Diamonds = new Image(getClass().getResource("6_of_diamonds.png").toExternalForm());
    	Image Six_Hearts = new Image(getClass().getResource("6_of_hearts.png").toExternalForm());
    	Image Six_Spades = new Image(getClass().getResource("6_of_spades.png").toExternalForm());

    	//6
    	Image Five_Clubs = new Image(getClass().getResource("5_of_clubs.png").toExternalForm());
    	Image Five_Diamonds = new Image(getClass().getResource("5_of_diamonds.png").toExternalForm());
    	Image Five_Hearts = new Image(getClass().getResource("5_of_hearts.png").toExternalForm());
    	Image Five_Spades = new Image(getClass().getResource("5_of_spades.png").toExternalForm());

    	//7
    	Image Four_Clubs = new Image(getClass().getResource("4_of_clubs.png").toExternalForm());
    	Image Four_Diamonds = new Image(getClass().getResource("4_of_diamonds.png").toExternalForm());
    	Image Four_Hearts = new Image(getClass().getResource("4_of_hearts.png").toExternalForm());
    	Image Four_Spades = new Image(getClass().getResource("4_of_spades.png").toExternalForm());

    	//8
    	Image Three_Clubs = new Image(getClass().getResource("3_of_clubs.png").toExternalForm());
    	Image Three_Diamonds = new Image(getClass().getResource("3_of_diamonds.png").toExternalForm());
    	Image Three_Hearts = new Image(getClass().getResource("3_of_hearts.png").toExternalForm());
    	Image Three_Spades = new Image(getClass().getResource("3_of_spades.png").toExternalForm());

    	//9
    	Image Two_Clubs = new Image(getClass().getResource("2_of_clubs.png").toExternalForm());
    	Image Two_Diamonds = new Image(getClass().getResource("2_of_diamonds.png").toExternalForm());
    	Image Two_Hearts = new Image(getClass().getResource("2_of_hearts.png").toExternalForm());
    	Image Two_Spades = new Image(getClass().getResource("2_of_spades.png").toExternalForm());

    	//10
    	Image Ace_Clubs = new Image(getClass().getResource("ace_of_clubs.png").toExternalForm());
    	Image Ace_Diamonds = new Image(getClass().getResource("ace_of_diamonds.png").toExternalForm());
    	Image Ace_Hearts = new Image(getClass().getResource("ace_of_hearts.png").toExternalForm());
    	Image Ace_Spades = new Image(getClass().getResource("ace_of_spades.png").toExternalForm());

    	//11
    	Image Jack_Clubs = new Image(getClass().getResource("jack_of_clubs.png").toExternalForm());
    	Image Jack_Diamonds = new Image(getClass().getResource("jack_of_diamonds.png").toExternalForm());
    	Image Jack_Hearts = new Image(getClass().getResource("jack_of_hearts.png").toExternalForm());
    	Image Jack_Spades = new Image(getClass().getResource("jack_of_spades.png").toExternalForm());

    	//12
    	Image Queen_Clubs = new Image(getClass().getResource("queen_of_clubs.png").toExternalForm());
    	Image Queen_Diamonds = new Image(getClass().getResource("queen_of_diamonds.png").toExternalForm());
    	Image Queen_Hearts = new Image(getClass().getResource("queen_of_hearts.png").toExternalForm());
    	Image Queen_Spades = new Image(getClass().getResource("queen_of_spades.png").toExternalForm());
    	
    	//13
    	Image King_Clubs = new Image(getClass().getResource("king_of_clubs.png").toExternalForm());
    	Image King_Diamonds = new Image(getClass().getResource("king_of_diamonds.png").toExternalForm());
    	Image King_Hearts = new Image(getClass().getResource("king_of_hearts.png").toExternalForm());
    	Image King_Spades = new Image(getClass().getResource("king_of_spades.png").toExternalForm());
    	
    	Image burner = new Image(getClass().getResource("burner.png").toExternalForm());
    	Image saver = new Image(getClass().getResource("saver.png").toExternalForm());
    	
    	//1
   		allcards.add(new ImageView(Ace_Clubs));
   		allcards.add(new ImageView(Ace_Diamonds));
   		allcards.add(new ImageView(Ace_Hearts));
   		allcards.add(new ImageView(Ace_Spades));
   		
    	//2
   		allcards.add(new ImageView(Two_Clubs));
   		allcards.add(new ImageView(Two_Diamonds));
   		allcards.add(new ImageView(Two_Hearts));
   		allcards.add(new ImageView(Two_Spades));
   	
    	//3
   		allcards.add(new ImageView(Three_Clubs));
   		allcards.add(new ImageView(Three_Diamonds));
   		allcards.add(new ImageView(Three_Hearts));
   		allcards.add(new ImageView(Three_Spades));
   	
    	//4
   		allcards.add(new ImageView(Four_Clubs));
   		allcards.add(new ImageView(Four_Diamonds));
   		allcards.add(new ImageView(Four_Hearts));
   		allcards.add(new ImageView(Four_Spades));
   		
    	//5
   		allcards.add(new ImageView(Five_Clubs));
   		allcards.add(new ImageView(Five_Diamonds));
   		allcards.add(new ImageView(Five_Hearts));
   		allcards.add(new ImageView(Five_Spades));
  
    	//6
   		allcards.add(new ImageView(Six_Clubs));
   		allcards.add(new ImageView(Six_Diamonds));
   		allcards.add(new ImageView(Six_Hearts));
   		allcards.add(new ImageView(Six_Spades));
   	
    	//7
   		allcards.add(new ImageView(Seven_Clubs));
   		allcards.add(new ImageView(Seven_Diamonds));
   		allcards.add(new ImageView(Seven_Hearts));
   		allcards.add(new ImageView(Seven_Spades));
   
    	//8
   		allcards.add(new ImageView(Eight_Clubs));
   		allcards.add(new ImageView(Eight_Diamonds));
   		allcards.add(new ImageView(Eight_Hearts));
   		allcards.add(new ImageView(Eight_Spades));
   		
    	//9	
   		allcards.add(new ImageView(Nine_Clubs));
   		allcards.add(new ImageView(Nine_Diamonds));
   		allcards.add(new ImageView(Nine_Hearts));
   		allcards.add(new ImageView(Nine_Spades));
   	
    	//10
   		allcards.add(new ImageView(Ten_Clubs));
   		allcards.add(new ImageView(Ten_Diamonds));
   		allcards.add(new ImageView(Ten_Hearts));
   		allcards.add(new ImageView(Ten_Spades));
 
    	//11
   		allcards.add(new ImageView(Jack_Clubs));
   		allcards.add(new ImageView(Jack_Diamonds));
   		allcards.add(new ImageView(Jack_Hearts));
   		allcards.add(new ImageView(Jack_Spades));
   		
    	//12
   		allcards.add(new ImageView(Queen_Clubs));
   		allcards.add(new ImageView(Queen_Diamonds));
   		allcards.add(new ImageView(Queen_Hearts));
   		allcards.add(new ImageView(Queen_Spades));
   		
    	//13	
   		allcards.add(new ImageView(King_Clubs));
   		allcards.add(new ImageView(King_Diamonds));
   		allcards.add(new ImageView(King_Hearts));
   		allcards.add(new ImageView(King_Spades));
   		
  		allcards.add(new ImageView(burner));
   		allcards.add(new ImageView(saver));
   		
    	for (int i = 0; i < cards.size(); i++) {
    		int rank;   		
    		
        	if (cards.get(i) instanceof Standard) {
                Standard standardCard = (Standard) cards.get(i);
        		Suit s;
                rank = standardCard.getRank();
                s= standardCard.getSuit();
                
                if(rank==1){
                	if (s==Suit.CLUB) {
                		ImageView card = allcards.get(0);
                		mycards.add(card);
					}
                	if (s==Suit.DIAMOND) {
                		ImageView card = allcards.get(1);
                		mycards.add(card);					
                	}
                	if (s==Suit.HEART) {
                		ImageView card = allcards.get(2);
                		mycards.add(card);			
                	}
                	if (s==Suit.SPADE) {
                		ImageView card = allcards.get(3);
                		mycards.add(card);				
                	}
                	
            }
                if(rank==2){
                	if (s==Suit.CLUB) {
                		ImageView card = allcards.get(4);
                		mycards.add(card);
					}
                	if (s==Suit.DIAMOND) {
                		ImageView card = allcards.get(5);
                		mycards.add(card);
					}
                	if (s==Suit.HEART) {
                		ImageView card = allcards.get(6);
                		mycards.add(card);
					}
                	if (s==Suit.SPADE) {
                		ImageView card = allcards.get(7);
                		mycards.add(card);
					}
                	
            }
                if(rank==3){
                	if (s==Suit.CLUB) {
                		ImageView card = allcards.get(8);
                		mycards.add(card);
					}
                	if (s==Suit.DIAMOND) {
                		ImageView card = allcards.get(9);
                		mycards.add(card);
					}
                	if (s==Suit.HEART) {
                		ImageView card = allcards.get(10);
                		mycards.add(card);
					}
                	if (s==Suit.SPADE) {
                		ImageView card = allcards.get(11);
                		mycards.add(card);
					}
                	
            }
                if(rank==4){
                	if (s==Suit.CLUB) {
                		ImageView card = allcards.get(12);
                		mycards.add(card);
					}
                	if (s==Suit.DIAMOND) {
                		ImageView card = allcards.get(13);
                		mycards.add(card);
					}
                	if (s==Suit.HEART) {
                		ImageView card = allcards.get(14);
                		mycards.add(card);
					}
                	if (s==Suit.SPADE) {
                		ImageView card = allcards.get(15);
                		mycards.add(card);
					}
                }
                if (rank == 5) {
                	if (s==Suit.CLUB) {
                		ImageView card = allcards.get(16);
                		mycards.add(card);
					}
                	if (s==Suit.DIAMOND) {
                		ImageView card = allcards.get(17);
                		mycards.add(card);
					}
                	if (s==Suit.HEART) {
                		ImageView card = allcards.get(18);
                		mycards.add(card);
					}
                	if (s==Suit.SPADE) {
                		ImageView card = allcards.get(19);
                		mycards.add(card);
					}
                }
                if (rank == 6) {
                	if (s==Suit.CLUB) {
                		ImageView card = allcards.get(20);
                		mycards.add(card);
					}
                	if (s==Suit.DIAMOND) {
                		ImageView card = allcards.get(21);
                		mycards.add(card);
					}
                	if (s==Suit.HEART) {
                		ImageView card = allcards.get(22);
                		mycards.add(card);
					}
                	if (s==Suit.SPADE) {
                		ImageView card = allcards.get(23);
                		mycards.add(card);
					}
                }
                if (rank == 7) {
                	if (s==Suit.CLUB) {
                		ImageView card = allcards.get(24);
                		mycards.add(card);
					}
                	if (s==Suit.DIAMOND) {
                		ImageView card = allcards.get(25);
                		mycards.add(card);
					}
                	if (s==Suit.HEART) {
                		ImageView card = allcards.get(26);
                		mycards.add(card);
					}
                	if (s==Suit.SPADE) {
                		ImageView card = allcards.get(27);
                		mycards.add(card);
					}
                }
                if (rank == 8) {
                	if (s==Suit.CLUB) {
                		ImageView card = allcards.get(28);
                		mycards.add(card);
					}
                	if (s==Suit.DIAMOND) {
                		ImageView card = allcards.get(29);
                		mycards.add(card);
					}
                	if (s==Suit.HEART) {
                		ImageView card = allcards.get(30);
                		mycards.add(card);
					}
                	if (s==Suit.SPADE) {
                		ImageView card = allcards.get(31);
                		mycards.add(card);
					}
                }
                if (rank == 9) {
                	if (s==Suit.CLUB) {
                		ImageView card = allcards.get(32);
                		mycards.add(card);
					}
                	if (s==Suit.DIAMOND) {
                		ImageView card = allcards.get(33);
                		mycards.add(card);
                	}
                	if (s==Suit.HEART) {
                		ImageView card = allcards.get(34);
                		mycards.add(card);
                	}
                	if (s==Suit.SPADE) {
                		ImageView card = allcards.get(35);
                		mycards.add(card);
                	}
                }
                if (rank == 10) {
                	if (s==Suit.CLUB) {
                		ImageView card = allcards.get(36);
                		mycards.add(card);
                	}
                	if (s==Suit.DIAMOND) {
                		ImageView card = allcards.get(37);
                		mycards.add(card);
                	}
                	if (s==Suit.HEART) {
                		ImageView card = allcards.get(38);
                		mycards.add(card);
                	}
                	if (s==Suit.SPADE) {
                		ImageView card = allcards.get(39);
                		mycards.add(card);
                	}
                }
                if (rank == 11) {
                	if (s==Suit.CLUB) {
                		ImageView card = allcards.get(40);
                		mycards.add(card);
                	}
                	if (s==Suit.DIAMOND) {
                		ImageView card = allcards.get(41);
                		mycards.add(card);
                	}
                	if (s==Suit.HEART) {
                		ImageView card = allcards.get(42);
                		mycards.add(card);
                	}
                	if (s==Suit.SPADE) {
                		ImageView card = allcards.get(43);
                		mycards.add(card);
                	}
                }
                if (rank == 12) {
                	if (s==Suit.CLUB) {
                		ImageView card = allcards.get(44);
                		mycards.add(card);
                	}
                	if (s==Suit.DIAMOND) {
                		ImageView card = allcards.get(45);
                		mycards.add(card);
                	}
                	if (s==Suit.HEART) {
                		ImageView card = allcards.get(46);
                		mycards.add(card);
                	}
                	if (s==Suit.SPADE) {
                		ImageView card = allcards.get(47);
                		mycards.add(card);
                	}
                }
                if (rank == 13) {
                	if (s==Suit.CLUB) {
                		ImageView card = allcards.get(48);
                		mycards.add(card);
                	}
                	if (s==Suit.DIAMOND) {
                		ImageView card = allcards.get(49);
                		mycards.add(card);
                	}
                	if (s==Suit.HEART) {
                		ImageView card = allcards.get(50);
                		mycards.add(card);
                	}
                	if (s==Suit.SPADE) {
                		ImageView card = allcards.get(51);
                		mycards.add(card);
                	}	
                }
        	}

               	else{
                    Wild WildCard = (Wild) cards.get(i);
                    String name = WildCard.getName();
                    if (name.equals("MarbleBurner")) {
                		ImageView card = allcards.get(52);
                		mycards.add(card);
                	}
                    if (name.equals("MarbleSaver")) {
                		ImageView card = allcards.get(53);
                		mycards.add(card);
                	}
                } 
    }
    	
        	for(int i=0;i<cards.size();i++){
        		ImageView card = new ImageView(mycards.get(i).getImage());
            	root.getChildren().add(card); 
            	mycards.remove(i);
            	mycards.add(i,card);
        	}
        	
        	mycards.get(0).setLayoutX(1615);
        	mycards.get(0).setLayoutY(1400);
        	mycards.get(1).setLayoutX(1920);
        	mycards.get(1).setLayoutY(1400);
        	mycards.get(2).setLayoutX(2225);
        	mycards.get(2).setLayoutY(1400);
        	mycards.get(3).setLayoutX(2530);
        	mycards.get(3).setLayoutY(1400);  
        	control.setMyCards(mycards);
        	control.play();

    }
        
}

Controls.java

package JackarooView;

import java.io.IOException;
import java.util.ArrayList;








import model.Colour;
import model.card.Card;
import model.card.standard.Standard;
import model.card.standard.Suit;
import model.card.wild.Wild;
import model.player.Marble;
import engine.Game;
import engine.board.Board;
import exception.GameException;
import javafx.animation.Animation;
import javafx.animation.KeyFrame;
import javafx.animation.KeyValue;
import javafx.animation.ScaleTransition;
import javafx.animation.Timeline;
import javafx.animation.TranslateTransition;
import javafx.fxml.FXMLLoader;
import javafx.geometry.Insets;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Label;
import javafx.scene.control.TextArea;
import javafx.scene.effect.DropShadow;
import javafx.scene.effect.GaussianBlur;
import javafx.scene.effect.InnerShadow;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.AnchorPane;
import javafx.scene.layout.Border;
import javafx.scene.layout.BorderStroke;
import javafx.scene.layout.BorderStrokeStyle;
import javafx.scene.layout.BorderWidths;
import javafx.scene.layout.CornerRadii;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.Pane;
import javafx.scene.layout.StackPane;
import javafx.scene.paint.Color;
import javafx.scene.paint.ImagePattern;
import javafx.scene.shape.Circle;
import javafx.scene.shape.Rectangle;
import javafx.scene.text.Font;
import javafx.stage.Stage;
import javafx.util.Duration;

public class Controls {
	private ArrayList<ImageView> track = new ArrayList<>();
	private ArrayList<ImageView> Safe_zones = new ArrayList<>();
	private ArrayList<Integer> green_marble = new ArrayList<>();
	private ArrayList<Integer> red_marble = new ArrayList<>();
	private ArrayList<Integer> yellow_marble = new ArrayList<>();
	private ArrayList<Integer> blue_marble = new ArrayList<>();
	private ArrayList<ImageView> marbles = new ArrayList<>();
	private ArrayList<ImageView> my_cards = new ArrayList<>();
	private Game game;
	private int Green;
	private int Yellow;
	private int Red;
	private int Blue;
	
    public Controls( ) {

    }
    public void setTrack(ArrayList<ImageView> track){
    	this.track = track;
    }
    public void setSafeZones(ArrayList<ImageView> Safe_zones){
    	this.Safe_zones = Safe_zones;
    }
    public void setGreen(ArrayList<Integer> green){
    	this.green_marble = green;
    }
    public void setRed(ArrayList<Integer> red){
    	this.red_marble = red;
    }
    public void setYellow(ArrayList<Integer> yellow){
    	this.yellow_marble = yellow;
    }
    public void setBlue(ArrayList<Integer> blue){
    	this.blue_marble = blue;
    }
    public void setMarbles(ArrayList<ImageView>marbles){
    	this.marbles = marbles;
    }
    public void setMyCards(ArrayList<ImageView> cards){
    	this.my_cards = cards;
    }
    public void setGame(Game game){
    	this.game = game;
    }
    
    public void play_myCard(){
	    for (ImageView img : this.my_cards) {	
	            img.setDisable(false);  
	    }
    	final int[] clicks = {0};
    	for(int i=0;i<this.my_cards.size();i++){
        	DropShadow shadow = new DropShadow();
        	shadow.setRadius(10);
        	shadow.setOffsetX(0);
        	shadow.setOffsetY(5);
        	shadow.setColor(Color.rgb(0, 0, 0, 0.3));
        	InnerShadow innerShadow = new InnerShadow();
        	innerShadow.setColor(Color.rgb(0, 0, 0, 0.2));
        	innerShadow.setRadius(5);
        	shadow.setInput(innerShadow);
        	this.my_cards.get(i).setEffect(shadow);
        	this.my_cards.get(i).setFitWidth(300);
        	this.my_cards.get(i).setFitHeight(380);
        	    	
        	int y=i;
        	this.my_cards.get(i).setOnMouseClicked((MouseEvent event) -> {
        			clicks[0]++;
        		    for (ImageView img : this.my_cards) {	
        		        if (img != this.my_cards.get(y)) {
        		            img.setDisable(true);  
        		        }
        		    }
             		TranslateTransition transition = new TranslateTransition();
                    transition.setNode(this.my_cards.get(y));
                    transition.setDuration(Duration.seconds(0.5));
                    transition.setToY(-135+this.my_cards.get(y).getY());
                    transition.play();
                    
                    ScaleTransition scale = new ScaleTransition(Duration.seconds(0.5), this.my_cards.get(y));
                    scale.setToX(1.18);
                    scale.setToY(1.18);
                    scale.setCycleCount(1);
                    scale.setAutoReverse(false);
                    scale.play();
                    if(this.game.canPlayTurn()){
                    	int[]pos = {0};
                    	for(int k=0; k<100; k++){
            					int h = k;
            					this.track.get(k).setOnMouseClicked((MouseEvent move) -> {
            						System.out.println("yA77");
            						if(this.game.getBoard().getTrack().get(h).getMarble()!=null && this.game.getBoard().getTrack().get(h).getMarble().getColour() == this.game.getPlayers().get(0).getColour()){
            							try {
            								System.out.println("off");
            								this.game.selectMarble(game.getBoard().getTrack().get(h).getMarble());
            								this.game.getPlayers().get(0).selectCard(this.game.getPlayers().get(0).getHand().get(y));
            								this.game.playPlayerTurn();
            								this.game.endPlayerTurn();
            								pos[0] = h;
            								check_track_2(clicks[0],pos[0]);
            								System.out.println("GG");
            								
                	        				int g=0;
                	        				for(int f=0; f<y;f++){
                	        						g=g+308;			
                	        				}
            								
                	                 		TranslateTransition transition_4 = new TranslateTransition();
                	                 		transition_4.setNode(this.my_cards.get(y));
                	                 		transition_4.setDuration(Duration.seconds(0.5));
                	                 		transition_4.setToY(-821+this.my_cards.get(y).getY());
                	                 		transition_4.setToX(-306-g+this.my_cards.get(y).getX());
                	                 		transition_4.play();
                	                        
                	                        ScaleTransition scale_4 = new ScaleTransition(Duration.seconds(0.5), this.my_cards.get(y));
                	                        scale_4.setToX(0.67);
                	                        scale_4.setToY(0.67);
                	                        scale_4.setCycleCount(1);
                	                        scale_4.setAutoReverse(false);
                	                        scale_4.play();
                	                        
            							} catch (Exception e) {
            								e.printStackTrace();
            							}
            						}
            					});
                    	} 
                    }
                    
            		if(clicks[0]==2){
            			if(this.game.canPlayTurn()){
            				try {
                    		    for (ImageView img : this.my_cards) {	
                    		        if (img != this.my_cards.get(y)) {
                    		            img.setDisable(false);  
                    		        }
                    		    }
            					this.my_cards.get(y).setDisable(true);

            					clicks[0]=0;
            					this.game.getPlayers().get(0).selectCard(game.getPlayers().get(0).getHand().get(y));
            			    	this.game.playPlayerTurn();
								this.game.endPlayerTurn();

    	    	        				
    	        				int g=0;
    	        				for(int f=0; f<y;f++){
    	        						g=g+308;			
    	        				}
    	                 		TranslateTransition transition_3 = new TranslateTransition();
    	                 		transition_3.setNode(this.my_cards.get(y));
    	                 		transition_3.setDuration(Duration.seconds(0.5));
    	                 		transition_3.setToY(-821+this.my_cards.get(y).getY());
    	                 		transition_3.setToX(-306-g+this.my_cards.get(y).getX());
    	                 		transition_3.play();
    	                        
    	                        ScaleTransition scale_3 = new ScaleTransition(Duration.seconds(0.5), this.my_cards.get(y));
    	                        scale_3.setToX(0.67);
    	                        scale_3.setToY(0.67);
    	                        scale_3.setCycleCount(1);
    	                        scale_3.setAutoReverse(false);
    	                        scale_3.play();
    	                        check_track(0);
    	                        this.play_Bahgat();

    							
    						} catch (Exception e) {
    							
    							e.printStackTrace();
    						}

            			}

            		}
                    
       /*    		if(clicks[0]==2){
            			clicks[0]=0;
            		    for (ImageView img : this.my_cards) {
            		        if (img != this.my_cards.get(y)) {
            		            img.setDisable(false);  
            		        }
            		    }
                		TranslateTransition transition_2 = new TranslateTransition();
                		transition_2 .setNode(this.my_cards.get(y));
                		transition_2 .setDuration(Duration.seconds(0.5));
                		transition_2 .setToY(this.my_cards.get(y).getY());
                		transition_2 .play();
                        
                        ScaleTransition scale_2 = new ScaleTransition(Duration.seconds(0.5), this.my_cards.get(y));
                        scale_2.setToX(1);
                        scale_2.setToY(1);
                        scale_2.setCycleCount(1);
                        scale_2.setAutoReverse(false);
                        scale_2.play(); 
            		} */
            		

    		});
    	}
    	
    }
    
    public void check_track(int p){
        for(int k=0; k<100; k++){
			if(this.game.getBoard().getTrack().get(k).getMarble()!=null && this.game.getBoard().getTrack().get(k).getMarble().getColour() == this.game.getPlayers().get(p).getColour()){
				
				ImageView swap_track = this.track.get(k);
				double X = this.track.get(k).getLayoutX();
				double Y = this.track.get(k).getLayoutY();
				
				if(this.game.getPlayers().get(p).getColour()==Colour.GREEN){
					ImageView swap_marble = this.marbles.get(green_marble.get(0));
					Integer marble_index = green_marble.get(0);
					double green_X = this.marbles.get(green_marble.get(0)).getLayoutX();
					double green_Y = this.marbles.get(green_marble.get(0)).getLayoutY();
					this.track.get(k).setLayoutX(green_X);
					this.track.get(k).setLayoutY(green_Y);
					this.marbles.get(green_marble.get(0)).setLayoutX(X);
					this.marbles.get(green_marble.get(0)).setLayoutY(Y);
					
					green_marble.remove(0);
					green_marble.add(marble_index);
					this.marbles.set(marble_index,swap_track);
					this.track.set(k,swap_marble);
							
				}
				if(this.game.getPlayers().get(p).getColour()==Colour.RED){
					ImageView swap_marble = this.marbles.get(red_marble.get(0));
					Integer marble_index = red_marble.get(0);
					double red_X = this.marbles.get(red_marble.get(0)).getLayoutX();
					double red_Y = this.marbles.get(red_marble.get(0)).getLayoutY();
					this.track.get(k).setLayoutX(red_X);
					this.track.get(k).setLayoutY(red_Y);
					this.marbles.get(red_marble.get(0)).setLayoutX(X);
					this.marbles.get(red_marble.get(0)).setLayoutY(Y);
					
					red_marble.remove(0);
					red_marble.add(marble_index);
					this.marbles.set(marble_index,swap_track);
					this.track.set(k,swap_marble);
					
				}
				if(this.game.getPlayers().get(p).getColour()==Colour.BLUE){
					ImageView swap_marble = this.marbles.get(blue_marble.get(0));
					Integer marble_index = blue_marble.get(0);
					double blue_X = this.marbles.get(blue_marble.get(0)).getLayoutX();
					double blue_Y = this.marbles.get(blue_marble.get(0)).getLayoutY();
					this.track.get(k).setLayoutX(blue_X);
					this.track.get(k).setLayoutY(blue_Y);
					this.marbles.get(blue_marble.get(0)).setLayoutX(X);
					this.marbles.get(blue_marble.get(0)).setLayoutY(Y);
					
					blue_marble.remove(0);
					blue_marble.add(marble_index);
					this.marbles.set(marble_index,swap_track);
					this.track.set(k,swap_marble);
				}
				if(this.game.getPlayers().get(p).getColour()==Colour.YELLOW){
					ImageView swap_marble = this.marbles.get(yellow_marble.get(0));
					Integer marble_index = yellow_marble.get(0);
					double yellow_X = this.marbles.get(yellow_marble.get(0)).getLayoutX();
					double yellow_Y = this.marbles.get(yellow_marble.get(0)).getLayoutY();
					this.track.get(k).setLayoutX(yellow_X);
					this.track.get(k).setLayoutY(yellow_Y);
					this.marbles.get(yellow_marble.get(0)).setLayoutX(X);
					this.marbles.get(yellow_marble.get(0)).setLayoutY(Y);
										
					yellow_marble.remove(0);
					yellow_marble.add(marble_index);
					this.marbles.set(marble_index,swap_track);
					this.track.set(k,swap_marble);
					
				}
				
			}

        }
    }
    
    public void check_track_2(int clicks,int pos){
        for(int k=0; k<100; k++){
        		
			ImageView swap_track = this.track.get(k);
			double X = this.track.get(k).getLayoutX();
			double Y = this.track.get(k).getLayoutY();
			
			if(this.game.getBoard().getTrack().get(k).getMarble()!=null && game.getBoard().getTrack().get(k).getMarble().getColour() == this.game.getPlayers().get(0).getColour()){
				ImageView swap_marble = this.track.get(pos);
				Integer marble_index = pos;
				double green_X = this.track.get(pos).getLayoutX();
				double green_Y = this.track.get(pos).getLayoutY();
				this.track.get(k).setLayoutX(green_X);
				this.track.get(k).setLayoutY(green_Y);
				this.track.get(pos).setLayoutX(X);
				this.track.get(pos).setLayoutY(Y);
				
				this.track.remove(marble_index);
				this.track.add(marble_index,swap_track);
				this.track.remove(k);
				this.track.add(k,swap_marble); 							
			}
        }
        clicks = 0;
        
    }
    public void check_track_3(){

    }
    
    public void play_Bahgat( ){
    	int marbles=0;

		if(this.game.getPlayers().get(1).getColour() == Colour.BLUE){
			 if(this.game.canPlayTurn()){
					try {
						System.out.println("GG");

						this.game.playPlayerTurn();
				    	System.out.println(this.game.getPlayers().get(1).getSelectedCard());

				    	this.game.endPlayerTurn();

						 for(int k=0; k<100; k++){

								if(this.game.getBoard().getTrack().get(k).getMarble()!=null && this.game.getBoard().getTrack().get(k).getMarble().getColour() == this.game.getPlayers().get(1).getColour()){

									marbles++;
								}
						 }
						if(marbles > Blue){

							check_track(1);
							Blue = marbles;

						}
						this.play_Ragel3enab();

					} catch (GameException e) {
						e.printStackTrace();
					}
			 }
		}
		if(this.game.getPlayers().get(1).getColour() == Colour.RED){
			 if(this.game.canPlayTurn()){
					try {
						System.out.println("GG");

						this.game.playPlayerTurn();
				    	System.out.println(this.game.getPlayers().get(1).getSelectedCard());

				    	this.game.endPlayerTurn();

						 for(int k=0; k<100; k++){
								if(this.game.getBoard().getTrack().get(k).getMarble()!=null && game.getBoard().getTrack().get(k).getMarble().getColour() == this.game.getPlayers().get(1).getColour()){

									marbles++;
								}
						 }
						if(marbles > Red){

							check_track(1);
							Red = marbles;


						}
						this.play_Ragel3enab();

					} catch (GameException e) {
						e.printStackTrace();
					}
			 	}
		}
		if(this.game.getPlayers().get(1).getColour() == Colour.GREEN){
	        if(this.game.canPlayTurn()){
				try {
					System.out.println("GG");

					this.game.playPlayerTurn();
			    	System.out.println(this.game.getPlayers().get(1).getSelectedCard());

			    	this.game.endPlayerTurn();

					for(int k=0; k<100; k++){

							if(this.game.getBoard().getTrack().get(k).getMarble()!=null && game.getBoard().getTrack().get(k).getMarble().getColour() == this.game.getPlayers().get(1).getColour()){

								marbles++;
							}
					 }
					if(marbles > Green){

						check_track(1);
						Green = marbles;


					}
					this.play_Ragel3enab();

				} catch (GameException e) {
					e.printStackTrace();
				}
	        }
		}
		if(this.game.getPlayers().get(1).getColour() == Colour.YELLOW){
	        if(this.game.canPlayTurn()){
				try {
					System.out.println("GG");

					this.game.playPlayerTurn();
			    	System.out.println(this.game.getPlayers().get(1).getSelectedCard());

			    	this.game.endPlayerTurn();

					for(int k=0; k<100; k++){

							if(this.game.getBoard().getTrack().get(k).getMarble()!=null && game.getBoard().getTrack().get(k).getMarble().getColour() == this.game.getPlayers().get(1).getColour()){

								marbles++;
							}
					 }
					if(marbles > Yellow){

						check_track(1);
						Yellow  = marbles;
					}
					this.play_Ragel3enab();

				} catch (GameException e) {
					e.printStackTrace();
				}
	        }
		}
    }
    	
    public void play(){
    	this.play_myCard();
    	this.play_myCard();
    }
    
    
    
    
    
    
    public void play_Ragel3enab(){
     	int marbles=0;
		if(this.game.getPlayers().get(2).getColour() == Colour.BLUE){
			 if(this.game.canPlayTurn()){
				try {
					System.out.println("GG");

					this.game.playPlayerTurn();
			    	System.out.println(this.game.getPlayers().get(2).getSelectedCard());

			    	this.game.endPlayerTurn();

					 for(int k=0; k<100; k++){

							if(this.game.getBoard().getTrack().get(k).getMarble()!=null && this.game.getBoard().getTrack().get(k).getMarble().getColour() == this.game.getPlayers().get(2).getColour()){

								marbles++;
							}
					 }
					if(marbles > Blue){

						check_track(2);
						Blue = marbles;

					}
					this.play_Mo7yy();

				} catch (GameException e) {
					e.printStackTrace();
				}
	        }
		}
		if(this.game.getPlayers().get(2).getColour() == Colour.RED){
			
	        if(this.game.canPlayTurn()){
				try {
					System.out.println("GG");

					this.game.playPlayerTurn();
			    	System.out.println(this.game.getPlayers().get(2).getSelectedCard());

			    	this.game.endPlayerTurn();

					 for(int k=0; k<100; k++){
							if(this.game.getBoard().getTrack().get(k).getMarble()!=null && game.getBoard().getTrack().get(k).getMarble().getColour() == this.game.getPlayers().get(2).getColour()){

								marbles++;
							}
					 }
					if(marbles > Red){

						check_track(2);
						Red = marbles;

					}
					this.play_Mo7yy();

				} catch (GameException e) {
					e.printStackTrace();
				}
	        }
		}
		if(this.game.getPlayers().get(2).getColour() == Colour.GREEN){
	        if(this.game.canPlayTurn()){
				try {
					System.out.println("GG");

					this.game.playPlayerTurn();
			    	System.out.println(this.game.getPlayers().get(2).getSelectedCard());

			    	this.game.endPlayerTurn();

					for(int k=0; k<100; k++){

							if(this.game.getBoard().getTrack().get(k).getMarble()!=null && game.getBoard().getTrack().get(k).getMarble().getColour() == this.game.getPlayers().get(2).getColour()){

								marbles++;
							}
					 }
					if(marbles > Green){

						check_track(2);
						Green = marbles;

					}
					this.play_Mo7yy();

				} catch (GameException e) {
					e.printStackTrace();
				}
	        }
		}
		if(this.game.getPlayers().get(2).getColour() == Colour.YELLOW){
	        if(this.game.canPlayTurn()){
				try {
					System.out.println("GG");

					this.game.playPlayerTurn();
			    	System.out.println(this.game.getPlayers().get(2).getSelectedCard());

			    	this.game.endPlayerTurn();

					for(int k=0; k<100; k++){

							if(this.game.getBoard().getTrack().get(k).getMarble()!=null && game.getBoard().getTrack().get(k).getMarble().getColour() == this.game.getPlayers().get(2).getColour()){

								marbles++;
							}
					 }
					if(marbles > Yellow){

						check_track(2);
						Yellow  = marbles;
					}
					this.play_Mo7yy();

				} catch (GameException e) {
					e.printStackTrace();
				}
	        }
		}
    }
    
    public void play_Mo7yy(){
     	int marbles=0;
		if(this.game.getPlayers().get(3).getColour() == Colour.BLUE){
			 if(this.game.canPlayTurn()){
				try {
					System.out.println("GG");

					this.game.playPlayerTurn();
			    	System.out.println(this.game.getPlayers().get(3).getSelectedCard());

			    	this.game.endPlayerTurn();

					 for(int k=0; k<100; k++){

							if(this.game.getBoard().getTrack().get(k).getMarble()!=null && this.game.getBoard().getTrack().get(k).getMarble().getColour() == this.game.getPlayers().get(3).getColour()){

								marbles++;
							}
					 }
					if(marbles > Blue){

						check_track(3);
						Blue = marbles;
					}
				} catch (GameException e) {
					e.printStackTrace();
				}
	        }
		}
		if(this.game.getPlayers().get(3).getColour() == Colour.RED){
	        if(this.game.canPlayTurn()){
				try {
					System.out.println("GG");

					this.game.playPlayerTurn();
			    	System.out.println(this.game.getPlayers().get(3).getSelectedCard());

			    	this.game.endPlayerTurn();

					 for(int k=0; k<100; k++){
							if(this.game.getBoard().getTrack().get(k).getMarble()!=null && game.getBoard().getTrack().get(k).getMarble().getColour() == this.game.getPlayers().get(3).getColour()){

								marbles++;
							}
					 }
					if(marbles > Red){

						check_track(3);
						Red = marbles;
					}
				} catch (GameException e) {
					e.printStackTrace();
				}
	        }
		}
		if(this.game.getPlayers().get(3).getColour() == Colour.GREEN){
	        if(this.game.canPlayTurn()){
				try {
					System.out.println("GG");

					this.game.playPlayerTurn();
			    	System.out.println(this.game.getPlayers().get(3).getSelectedCard());

			    	this.game.endPlayerTurn();

					for(int k=0; k<100; k++){

							if(this.game.getBoard().getTrack().get(k).getMarble()!=null && game.getBoard().getTrack().get(k).getMarble().getColour() == this.game.getPlayers().get(3).getColour()){

								marbles++;
							}
					 }
					if(marbles > Green){

						check_track(3);
						Green = marbles;
					}
				} catch (GameException e) {
					e.printStackTrace();
				}
	        }
		}
		if(this.game.getPlayers().get(3).getColour() == Colour.YELLOW){
	        if(this.game.canPlayTurn()){
				try {
					System.out.println("GG");

					this.game.playPlayerTurn();
			    	System.out.println(this.game.getPlayers().get(3).getSelectedCard());

			    	this.game.endPlayerTurn();

					for(int k=0; k<100; k++){

							if(this.game.getBoard().getTrack().get(k).getMarble()!=null && game.getBoard().getTrack().get(k).getMarble().getColour() == this.game.getPlayers().get(3).getColour()){

								marbles++;
							}
					 }
					if(marbles > Yellow){

						check_track(3);
						Yellow  = marbles;
					}
				} catch (GameException e) {
					e.printStackTrace();
				}
	        }
		}
    }
    
    

}
Board.java

package engine.board;

import java.util.ArrayList;

import engine.GameManager;
import exception.CannotFieldException;
import exception.IllegalDestroyException;
import exception.IllegalMovementException;
import exception.IllegalSwapException;
import exception.InvalidMarbleException;
import model.Colour;
import model.player.Marble;

@SuppressWarnings("unused")
public class Board implements BoardManager {
    private final ArrayList<Cell> track;
    private final ArrayList<SafeZone> safeZones;
	private final GameManager gameManager;
    private int splitDistance;

    public Board(ArrayList<Colour> colourOrder, GameManager gameManager) {
        this.track = new ArrayList<>();
        this.safeZones = new ArrayList<>();
        this.gameManager = gameManager;
        
        for (int i = 0; i < 100; i++) {
            this.track.add(new Cell(CellType.NORMAL));
            
            if (i % 25 == 0) 
                this.track.get(i).setCellType(CellType.BASE);
            
            else if ((i+2) % 25 == 0) 
                this.track.get(i).setCellType(CellType.ENTRY);
        }

        for(int i = 0; i < 8; i++)
            this.assignTrapCell();

        for (int i = 0; i < 4; i++)
            this.safeZones.add(new SafeZone(colourOrder.get(i)));

        splitDistance = 3;
    }

    public ArrayList<Cell> getTrack() {
        return this.track;
    }

    public ArrayList<SafeZone> getSafeZones() {
        return this.safeZones;
    }

    public void setSplitDistance(int splitDistance) {
        this.splitDistance = splitDistance;
    }
   
    private void assignTrapCell() {
        int randIndex = -1;
        
        do
            randIndex = (int)(Math.random() * 100); 
        while(this.track.get(randIndex).getCellType() != CellType.NORMAL || this.track.get(randIndex).isTrap());
        
        this.track.get(randIndex).setTrap(true);
    }
    
    private ArrayList<Cell> getSafeZone(Colour colour) {
        for (int i = 0; i < 4; i++) 
            if (this.safeZones.get(i).getColour() == colour) 
                return this.safeZones.get(i).getCells();
        
        return null;
    }

    private int getPositionInPath(ArrayList<Cell> path, Marble marble) {
        for(int i = 0; i < path.size(); i++) {
            if(path.get(i).getMarble() == marble) 
                return i;
        }
        
        return -1;
    }

    private int getBasePosition(Colour colour) {
        for(int i = 0; i < safeZones.size(); i++) {
            if(safeZones.get(i).getColour() == colour)
                return i * 25;
        }
        
        return -1;
    }

    private int getEntryPosition(Colour colour) {
        int idx = getBasePosition(colour);
        
        if(idx == -1)
            return -1;
        
        else
            return (idx - 2 + 100) % 100;
    }
    
    private ArrayList<Cell> validateSteps(Marble marble, int steps) throws IllegalMovementException {
    	Colour ownerColour = gameManager.getActivePlayerColour();
        ArrayList<Cell> safeZone = getSafeZone(marble.getColour());
        int entryPosition = getEntryPosition(ownerColour);

        int positionOnTrack = getPositionInPath(track, marble);
        int positionInSafeZone = getPositionInPath(safeZone, marble);

        ArrayList<Cell> fullPath = new ArrayList<>();
        
        if (positionOnTrack == -1 && positionInSafeZone == -1)
            throw new IllegalMovementException("Cannot move a marble that is not on track nor Safe Zone");
        
        if (positionOnTrack != -1) {
            int distanceToEntry = entryPosition - positionOnTrack;

            if (marble.getColour() == ownerColour && steps > 0 && distanceToEntry >= 0 && steps > distanceToEntry + 4)
                throw new IllegalMovementException("Rank is too high!");
            
            if (marble.getColour() == ownerColour && steps > 0 && distanceToEntry >= 0 && steps > distanceToEntry) {
                fullPath.addAll(track.subList(positionOnTrack, entryPosition + 1));
                fullPath.addAll(safeZone.subList(0, steps - distanceToEntry));
            }
            
            else {
                int target = (positionOnTrack + steps + 100) % 100;

                if (steps > 0) {
                	int current = positionOnTrack;
                    while (true) {
                        fullPath.add(track.get(current));
                        if (current == target) {
                            break;
                        }
                        current = (current + 1 + 100) % 100; 
                    }
                }
                
                else {
                	int current = positionOnTrack;
                    while (true) {
                        fullPath.add(track.get(current));
                        if (current == target) {
                            break;
                        }
                        current = (current - 1 + 100) % 100; 
                    }
                        
                }
            }
        }
        
        if (positionInSafeZone != -1) {
            if (steps < 0) 
                throw new IllegalMovementException("Cannot move a marble backwards in Safe Zone");

            int distanceLeft = 3 - positionInSafeZone; 

            if (steps > distanceLeft)
                throw new IllegalMovementException("Rank is too high!");

            fullPath.addAll(safeZone.subList(positionInSafeZone, positionInSafeZone + steps + 1));
        }

        
        return fullPath;
        
    }

    private void validatePath(Marble marble, ArrayList<Cell> fullPath, boolean destroy) throws IllegalMovementException{
        Colour ownerColour = gameManager.getActivePlayerColour();
        
        int marbleCount = 0;
        
        for(int i = 1; i < fullPath.size(); i++) {
            Cell cell = fullPath.get(i);
            if (cell.getMarble() != null) {
            	if (i != fullPath.size() - 1) //counting marbles in my path excluding target
            		marbleCount++;

                if (cell.getCellType() == CellType.SAFE)
                    throw new IllegalMovementException("Cannot bypass my Safe Zone marbles!");
                
                if (cell.getCellType() == CellType.BASE && track.indexOf(cell) == getBasePosition(cell.getMarble().getColour()))
                    throw new IllegalMovementException("Cannot bypass or land on marbles in their Base Cell!");

                if (!destroy) {
                	//not marble colour as even with moving opponent marble I cannot kill my own marbles not his
                    if (ownerColour == cell.getMarble().getColour())
                        throw new IllegalMovementException("Cannot bypass or land on my own marble!");
                    
                    //going into safe zone with a marble in the entry
                    if (cell.getCellType() == CellType.ENTRY && (i+1) < fullPath.size() && fullPath.get(i+1).getCellType() == CellType.SAFE)
                        throw new IllegalMovementException("Cannot bypass a marble blocking my Safe Zone!");

                    if (marbleCount > 1)
                        throw new IllegalMovementException("Cannot bypass more than 1 marble in my path!");
                }
                
            }
        }

    }
    
    private void move(Marble marble, ArrayList<Cell> fullPath, boolean destroy) throws IllegalDestroyException {
    	Cell currentCell = fullPath.get(0);
    	Cell targetCell = fullPath.get(fullPath.size()-1);
    	
    	currentCell.setMarble(null);

        if (destroy) {
            for(Cell cell : fullPath) {
                if (cell.getMarble() != null) 
                    destroyMarble(cell.getMarble());
            }
        }
        
        else if (targetCell.getMarble() != null) 
        	destroyMarble(targetCell.getMarble());   
        
        targetCell.setMarble(marble);

        if(targetCell.isTrap()) {
            destroyMarble(marble);
            targetCell.setTrap(false);
            assignTrapCell();
        }
        
	}
    
    private void validateSwap(Marble marble_1, Marble marble_2) throws IllegalSwapException {
    	Colour ownerColour = gameManager.getActivePlayerColour();

        int trackPosition_1 = getPositionInPath(track, marble_1);
        int trackPosition_2 = getPositionInPath(track, marble_2);

        if (trackPosition_1 == -1 || trackPosition_2 == -1) 
            throw new IllegalSwapException("Cannot swap marbles that are not on track.");
        
        Cell cell_1 = track.get(trackPosition_1);
        Cell cell_2 = track.get(trackPosition_2);

        if(ownerColour != marble_1.getColour() && cell_1.getCellType() == CellType.BASE && trackPosition_1 == getBasePosition(cell_1.getMarble().getColour())
        || ownerColour != marble_2.getColour() && cell_2.getCellType() == CellType.BASE && trackPosition_2 == getBasePosition(cell_2.getMarble().getColour()))
            throw new IllegalSwapException("Marbles that are in their Base Cell can not be selected as a swap target.");
    }
    
    private void validateDestroy(int positionInPath) throws IllegalDestroyException {
    	if (positionInPath == -1) 
            throw new IllegalDestroyException("Cannot burn marbles that aren't on track.");
    
        Cell current = track.get(positionInPath);
        
        if(current.getCellType() == CellType.BASE && current.getMarble() != null && positionInPath == getBasePosition(current.getMarble().getColour()))
            throw new IllegalDestroyException("Cannot burn marbles that are safe in their Base Cell.");
		
	}
    
    private void validateFielding(Cell occupiedBaseCell) throws CannotFieldException {
    	if (occupiedBaseCell.getMarble().getColour() == gameManager.getActivePlayerColour())
            throw new CannotFieldException("One of your marbles is already on your Base Cell");
	}
    
    private void validateSaving(int positionInSafeZone, int positionOnTrack) throws InvalidMarbleException {
    	if(positionInSafeZone != -1)
            throw new InvalidMarbleException("Cannot save marbles that are already in the Safe Zone.");
        
        if(positionOnTrack == -1)
            throw new InvalidMarbleException("Cannot save marbles that aren't on track.");
    }

    @Override
    public int getSplitDistance() {
        return this.splitDistance;
    }

    @Override
    public void moveBy(Marble marble, int steps, boolean destroy) throws IllegalMovementException, IllegalDestroyException{
    	ArrayList<Cell> fullPath = validateSteps(marble, steps);
    	
        validatePath(marble, fullPath, destroy);
        
        move(marble, fullPath, destroy);
    }

	@Override
    public void swap(Marble marble_1, Marble marble_2) throws IllegalSwapException {
        validateSwap(marble_1, marble_2);
        
        int trackPosition_1 = getPositionInPath(track, marble_1);
        int trackPosition_2 = getPositionInPath(track, marble_2);

        track.get(trackPosition_1).setMarble(marble_2);
        track.get(trackPosition_2).setMarble(marble_1);
    }

    @Override
    public void destroyMarble(Marble marble) throws IllegalDestroyException {
    	Colour ownerColour = gameManager.getActivePlayerColour();
        int positionOnTrack = getPositionInPath(track, marble); 
        
        if (marble.getColour() != ownerColour)
        	validateDestroy(positionOnTrack);

        this.track.get(positionOnTrack).setMarble(null);
        this.gameManager.sendHome(marble);
    }

    @Override
	public void sendToBase(Marble marble) throws CannotFieldException, IllegalDestroyException {
    	int basePosition = getBasePosition(marble.getColour());
    	Cell baseCell = this.track.get(basePosition);
    	
    	if(baseCell.getMarble() != null) {
    		validateFielding(baseCell);
            destroyMarble(baseCell.getMarble());
    	}
    	
    	baseCell.setMarble(marble);
	}

	@Override
	public void sendToSafe(Marble marble) throws InvalidMarbleException {
		int positionOnTrack = getPositionInPath(track, marble);
        int positionInSafeZone = getPositionInPath(getSafeZone(marble.getColour()), marble);

        validateSaving(positionInSafeZone, positionOnTrack);
    
        ArrayList<Cell> safeZone = getSafeZone(marble.getColour());
        ArrayList<Cell> freeSpaces = new ArrayList<>();

        for(Cell cell : safeZone){
            if(cell.getMarble() == null)
                freeSpaces.add(cell);
        }

        int randIndex = (int)(Math.random() * freeSpaces.size());
        freeSpaces.get(randIndex).setMarble(marble);
        this.track.get(positionOnTrack).setMarble(null);
	}
    
    @Override
    public ArrayList<Marble> getActionableMarbles() {
        ArrayList<Marble> marbles = new ArrayList<>();
        Colour colour = gameManager.getActivePlayerColour();
        ArrayList<Cell> safeZone = getSafeZone(colour);

        for(Cell cell : safeZone) {
            if(cell.getMarble() != null)
                marbles.add(cell.getMarble());
        }

        for(Cell cell : track) {
            if(cell.getMarble() != null)
                marbles.add(cell.getMarble());
        }

        return marbles;
    }	
    
}

BoardManager.java

package engine.board;

import java.util.ArrayList;

import exception.CannotFieldException;
import exception.IllegalDestroyException;
import exception.IllegalMovementException;
import exception.IllegalSwapException;
import exception.InvalidMarbleException;
import model.player.Marble;

public interface BoardManager { 
	public int getSplitDistance();
    public void moveBy(Marble marble, int steps, boolean destroy) throws IllegalMovementException, IllegalDestroyException;
    public void swap(Marble marble_1, Marble marble_2) throws IllegalSwapException;
    public void destroyMarble(Marble marble) throws IllegalDestroyException;
    public void sendToBase(Marble marble) throws CannotFieldException, IllegalDestroyException;
    public void sendToSafe(Marble marble) throws InvalidMarbleException;
    public ArrayList<Marble> getActionableMarbles();
}

Cell.java

package engine.board;

import model.player.Marble;

public class Cell {
    private Marble marble;
    private CellType cellType;
    private boolean trap;

    public Cell(CellType cellType) {
        this.cellType = cellType;
        this.marble = null;
        this.trap = false;
    }

	public Marble getMarble() {
		return marble;
	}

	public void setMarble(Marble marble) {
		this.marble = marble;
	}

	public CellType getCellType() {
		return cellType;
	}

	public void setCellType(CellType cellType) {
		this.cellType = cellType;
	}

	public boolean isTrap() {
		return trap;
	}

	public void setTrap(boolean trap) {
		this.trap = trap;
	}

}

CellType.java

package engine.board;

public enum CellType {
    NORMAL, SAFE, ENTRY, BASE
}
SafeZone.java

package engine.board;

import java.util.ArrayList;

import model.Colour;

public class SafeZone {
    private final Colour colour;
    private final ArrayList<Cell> cells;

    public SafeZone(Colour colour) {
        this.colour = colour;
        this.cells = new ArrayList<>();
        for (int i = 0; i < 4; i++) 
            this.cells.add(new Cell(CellType.SAFE));
    }

    public Colour getColour() {
        return this.colour;
    }

    public ArrayList<Cell> getCells() {
        return this.cells;
    }
    
    public boolean isFull() {
        for (Cell cell : this.cells) {
            if (cell.getMarble() == null) 
                return false;
        }
            
        return true;
    }

}

Game.java

package engine;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;

import engine.board.Board;
import engine.board.SafeZone;
import exception.CannotDiscardException;
import exception.CannotFieldException;
import exception.GameException;
import exception.IllegalDestroyException;
import exception.InvalidCardException;
import exception.InvalidMarbleException;
import exception.SplitOutOfRangeException;
import model.Colour;
import model.card.Card;
import model.card.Deck;
import model.player.*;

@SuppressWarnings("unused")
public class Game implements GameManager {
    private final Board board;
    private final ArrayList<Player> players;
	private int currentPlayerIndex;
    private final ArrayList<Card> firePit;
    private int turn;

    public Game(String playerName) throws IOException {
        turn = 0;
        currentPlayerIndex = 0;
        firePit = new ArrayList<>();

        ArrayList<Colour> colourOrder = new ArrayList<>();
        
        colourOrder.addAll(Arrays.asList(Colour.values()));
        
        Collections.shuffle(colourOrder);
        
        this.board = new Board(colourOrder, this);
        
        Deck.loadCardPool(this.board, (GameManager)this);
        
        this.players = new ArrayList<>();
        this.players.add(new Player(playerName, colourOrder.get(0)));
        
        //for (int i = 1; i < 4; i++) 
            //this.players.add(new CPU("CPU " + i, colourOrder.get(i), this.board));
        this.players.add(new CPU("Bahgat<3", colourOrder.get(1), this.board));
        this.players.add(new CPU("Ragol 3enab", colourOrder.get(2), this.board));
        this.players.add(new CPU("Mo7y", colourOrder.get(3), this.board));

        for (int i = 0; i < 4; i++) 
            this.players.get(i).setHand(Deck.drawCards());
        
    }
    
    public Board getBoard() {
        return board;
    }

    public ArrayList<Player> getPlayers() {
        return players;
    }

    public ArrayList<Card> getFirePit() {
        return firePit;
    }
    
    public void selectCard(Card card) throws InvalidCardException {
        players.get(currentPlayerIndex).selectCard(card);
    }

    public void selectMarble(Marble marble) throws InvalidMarbleException {
        players.get(currentPlayerIndex).selectMarble(marble);
    }

    public void deselectAll() {
        players.get(currentPlayerIndex).deselectAll();
    }

    public void editSplitDistance(int splitDistance) throws SplitOutOfRangeException {
        if(splitDistance < 1 || splitDistance > 6)
            throw new SplitOutOfRangeException();

        board.setSplitDistance(splitDistance);
    }

    public boolean canPlayTurn() {
        return players.get(currentPlayerIndex).getHand().size() == (4 - turn);
    }

    public void playPlayerTurn() throws GameException {
        players.get(currentPlayerIndex).play();
    }

    public void endPlayerTurn() {
        Card selected = players.get(currentPlayerIndex).getSelectedCard();
        players.get(currentPlayerIndex).getHand().remove(selected);
        firePit.add(selected);
        players.get(currentPlayerIndex).deselectAll();
        
        currentPlayerIndex = (currentPlayerIndex + 1) % 4;
        
        if(currentPlayerIndex == 0 && turn < 3) 
            turn++;
        
        else if (currentPlayerIndex == 0 && turn == 3) {
        	turn = 0;
        	for (Player p : players) {
              if(Deck.getPoolSize() < 4) {
	              Deck.refillPool(firePit);
	              firePit.clear();
              }
              ArrayList<Card> newHand = Deck.drawCards();
              p.setHand(newHand);
        	}
        		
        }
        
    }

    public Colour checkWin() {
        for(SafeZone safeZone : board.getSafeZones()) 
            if(safeZone.isFull())
                return safeZone.getColour();
    
        return null;
    }

    @Override
    public void sendHome(Marble marble) {
        for (Player player : players) {
            if (player.getColour() == marble.getColour()) {
                player.regainMarble(marble);
                break;
            }
        }
    }

    @Override
    public void fieldMarble() throws CannotFieldException, IllegalDestroyException {
        Marble marble = players.get(currentPlayerIndex).getOneMarble();
        
        if (marble == null)
        	throw new CannotFieldException("No marbles left in the Home Zone to field.");
        
        board.sendToBase(marble);
        players.get(currentPlayerIndex).getMarbles().remove(marble);
    }
    
    @Override
    public void discardCard(Colour colour) throws CannotDiscardException {
        for (Player player : players) {
            if (player.getColour() == colour) {
                int handSize = player.getHand().size();
                if(handSize == 0)
                    throw new CannotDiscardException("Player has no cards to discard.");
                int randIndex = (int) (Math.random() * handSize);
                this.firePit.add(player.getHand().remove(randIndex));
            }
        }
    }

    @Override
    public void discardCard() throws CannotDiscardException {
        int randIndex = (int) (Math.random() * 4);
        while(randIndex == currentPlayerIndex)
            randIndex = (int) (Math.random() * 4);

        discardCard(players.get(randIndex).getColour());
    }

    @Override
    public Colour getActivePlayerColour() {
        return players.get(currentPlayerIndex).getColour();
    }

    @Override
    public Colour getNextPlayerColour() {
        return players.get((currentPlayerIndex + 1) % 4).getColour();
    }
    
}

GameManager.java

package engine;

import exception.CannotDiscardException;
import exception.CannotFieldException;
import exception.IllegalDestroyException;
import model.Colour;
import model.player.Marble;

public interface GameManager {
	public void sendHome(Marble marble);
    public void fieldMarble() throws CannotFieldException, IllegalDestroyException;
    public void discardCard(Colour colour) throws CannotDiscardException;
    public void discardCard() throws CannotDiscardException;
    public Colour getActivePlayerColour();
    public Colour getNextPlayerColour();
}

ActionException.java

package exception;

public abstract class ActionException extends GameException {
	
	public ActionException() {
        super();
    }
	
    public ActionException(String message) {
        super(message);
    }

}
CannotDiscardException.java

package exception;

public class CannotDiscardException extends ActionException {

    public CannotDiscardException() {
        super();
    }

    public CannotDiscardException(String message) {
        super(message);
    }

}


CannotFieldException.java
package exception;

public class CannotFieldException extends ActionException{

    public CannotFieldException() {
        super();
    }

    public CannotFieldException(String message) {
        super(message);
    }
}
GameException.java
package exception;

public abstract class GameException extends Exception {

	public GameException() {
        super();
    }
	
    public GameException(String message) {
        super(message);
    }
}
IllegalDestroyException.java
package exception;

public class IllegalDestroyException extends ActionException {

    public IllegalDestroyException() {
        super();
    }

    public IllegalDestroyException(String message) {
        super(message);
    }

}
IllegalMovementException.java
package exception;

public class IllegalMovementException extends ActionException {

    public IllegalMovementException() {
        super();
    }

    public IllegalMovementException(String message) {
        super(message);
    }

}

IllegalSwapException.java

package exception;

public class IllegalSwapException extends ActionException {

    public IllegalSwapException() {
        super();
    }

    public IllegalSwapException(String message) {
        super(message);
    }
}

InvalidCardException.java

package exception;

public class InvalidCardException extends InvalidSelectionException {

    public InvalidCardException() {
        super();
    }

    public InvalidCardException(String message) {
        super(message);
    }

}

InvalidMarbleException.java
package exception;

public class InvalidMarbleException extends InvalidSelectionException {

    public InvalidMarbleException() {
        super();
    }

    public InvalidMarbleException(String message) {
        super(message);
    }

}

InvalidSelectionException.java

package exception;

public abstract class InvalidSelectionException extends GameException {

    public InvalidSelectionException() {
        super();
    }

    public InvalidSelectionException(String message) {
        super(message);
    }

}

SplitOutOfRangeException.java

package exception;

public class SplitOutOfRangeException extends InvalidSelectionException {

    public SplitOutOfRangeException() {
        super();
    }

    public SplitOutOfRangeException(String message) {
        super(message);
    }

}
src/model/card/standard/Ace.java
package model.card.standard;

import java.util.ArrayList;

import engine.GameManager;
import engine.board.BoardManager;
import exception.ActionException;
import exception.InvalidMarbleException;
import model.player.Marble;


public class Ace extends Standard {

    public Ace(String name, String description, Suit suit, BoardManager boardManager, GameManager gameManager) {
        super(name, description, 1, suit, boardManager, gameManager);
    }

    @Override
    public boolean validateMarbleSize(ArrayList<Marble> marbles) {
        return marbles.isEmpty() || super.validateMarbleSize(marbles);
    }

    @Override
    public void act(ArrayList<Marble> marbles) throws ActionException, InvalidMarbleException {
        if (marbles.isEmpty()) 
            this.gameManager.fieldMarble();
        
        else
            super.act(marbles);
    }
    
}


src/model/card/standard/Five.java
package model.card.standard;

import java.util.ArrayList;

import engine.GameManager;
import engine.board.BoardManager;
import model.player.Marble;

public class Five extends Standard {

    public Five(String name, String description, Suit suit, BoardManager boardManager, GameManager gameManager) {
        super(name, description, 5, suit, boardManager, gameManager);
    }

    @Override
    public boolean validateMarbleColours(ArrayList<Marble> marbles) {
        return true;
    }

}

src/model/card/standard/Four.java

package model.card.standard;

import java.util.ArrayList;

import engine.GameManager;
import engine.board.BoardManager;
import exception.ActionException;
import exception.InvalidMarbleException;
import model.player.Marble;

public class Four  extends Standard {

    public Four(String name, String description, Suit suit, BoardManager boardManager, GameManager gameManager) {
        super(name, description, 4, suit, boardManager, gameManager);
    }

    @Override
    public void act(ArrayList<Marble> marbles) throws ActionException, InvalidMarbleException {
        boardManager.moveBy(marbles.get(0), -4, false);
    }

}

src/model/card/standard/Jack.java
package model.card.standard;

import java.util.ArrayList;

import engine.GameManager;
import engine.board.BoardManager;
import exception.ActionException;
import exception.InvalidMarbleException;
import model.Colour;
import model.player.Marble;

public class Jack extends Standard {

    public Jack(String name, String description, Suit suit, BoardManager boardManager, GameManager gameManager) {
        super(name, description, 11, suit, boardManager, gameManager);
    }
    
    @Override
    public boolean validateMarbleSize(ArrayList<Marble> marbles) {
        return marbles.size() == 2 || super.validateMarbleSize(marbles);
    }

    @Override
    public boolean validateMarbleColours(ArrayList<Marble> marbles) {
    	if(marbles.size() == 2) {
    		Colour myColour = gameManager.getActivePlayerColour();
    		return marbles.get(0).getColour().equals(myColour) != marbles.get(1).getColour().equals(myColour); 		
    	}
    	
    	else
    		return super.validateMarbleColours(marbles);
    }

    @Override
    public void act(ArrayList<Marble> marbles) throws ActionException, InvalidMarbleException {
        if(marbles.size() == 2)
            boardManager.swap(marbles.get(0), marbles.get(1));
        
        else
            super.act(marbles);
    }

}
src/model/card/standard/King.java

package model.card.standard;

import java.util.ArrayList;

import engine.GameManager;
import engine.board.BoardManager;
import exception.ActionException;
import exception.InvalidMarbleException;
import model.player.Marble;

public class King extends Standard {

    public King(String name, String description, Suit suit, BoardManager boardManager, GameManager gameManager) {
        super(name, description, 13, suit, boardManager, gameManager);
    }

    @Override
    public boolean validateMarbleSize(ArrayList<Marble> marbles) {
        return marbles.isEmpty() || super.validateMarbleSize(marbles);
    }

    @Override
    public void act(ArrayList<Marble> marbles) throws ActionException, InvalidMarbleException {
        if (marbles.isEmpty()) 
            this.gameManager.fieldMarble();
        
        else
            this.boardManager.moveBy(marbles.get(0), 13, true);
    }

}


src/model/card/standard/Queen.java

package model.card.standard;

import java.util.ArrayList;

import engine.GameManager;
import engine.board.BoardManager;
import exception.ActionException;
import exception.InvalidMarbleException;
import model.player.Marble;

public class Queen extends Standard {

    public Queen(String name, String description, Suit suit, BoardManager boardManager, GameManager gameManager) {
        super(name, description, 12, suit, boardManager, gameManager);
    }

    @Override
    public boolean validateMarbleSize(ArrayList<Marble> marbles) {
        return marbles.isEmpty() || super.validateMarbleSize(marbles);
    }

    @Override
    public void act(ArrayList<Marble> marbles) throws ActionException, InvalidMarbleException {
        if (marbles.isEmpty()) 
            this.gameManager.discardCard();
        
        else
            super.act(marbles);
    }

}


src/model/card/standard/Seven.java

package model.card.standard;

import java.util.ArrayList;

import engine.GameManager;
import engine.board.BoardManager;
import exception.ActionException;
import exception.InvalidMarbleException;
import model.player.Marble;

public class Seven extends Standard {

    public Seven(String name, String description, Suit suit, BoardManager boardManager, GameManager gameManager) {
        super(name, description, 7, suit, boardManager, gameManager);
    }

    @Override
    public boolean validateMarbleSize(ArrayList<Marble> marbles) {
        return marbles.size() == 2 || super.validateMarbleSize(marbles);
    }

    @Override
    public void act(ArrayList<Marble> marbles) throws ActionException, InvalidMarbleException {
        if(marbles.size() == 2) {
            boardManager.moveBy(marbles.get(0), boardManager.getSplitDistance(), false);
            boardManager.moveBy(marbles.get(1), 7-boardManager.getSplitDistance(), false);
        }
        
        else
            super.act(marbles);
    }

}


src/model/card/standard/Standard.java
package model.card.standard;

import java.util.ArrayList;

import engine.GameManager;
import engine.board.BoardManager;
import exception.ActionException;
import exception.InvalidMarbleException;
import model.card.Card;
import model.player.Marble;

public class Standard extends Card {
    private final int rank;
    private final Suit suit;

    public Standard(String name, String description, int rank, Suit suit, BoardManager boardManager, GameManager gameManager) {
        super(name, description, boardManager, gameManager);
        this.rank = rank;
        this.suit = suit;
    }

    public int getRank() {
        return rank;
    }

    public Suit getSuit() {
        return suit;
    }

    @Override
    public void act(ArrayList<Marble> marbles) throws ActionException, InvalidMarbleException{
        this.boardManager.moveBy(marbles.get(0), rank, false);
    }

}

src/model/card/standard/Suit.java

package model.card.standard;

public enum Suit {
    HEART, DIAMOND, CLUB, SPADE
}

src/model/card/standard/Ten.java

package model.card.standard;

import java.util.ArrayList;

import engine.GameManager;
import engine.board.BoardManager;
import exception.ActionException;
import exception.InvalidMarbleException;
import model.player.Marble;

public class Ten extends Standard {

    public Ten(String name, String description, Suit suit, BoardManager boardManager, GameManager gameManager) {
        super(name, description, 10, suit, boardManager, gameManager);
    }

    @Override
    public boolean validateMarbleSize(ArrayList<Marble> marbles) {
        return marbles.isEmpty() || super.validateMarbleSize(marbles);
    }

    @Override
    public void act(ArrayList<Marble> marbles) throws ActionException, InvalidMarbleException {
        if(marbles.isEmpty())
            gameManager.discardCard(gameManager.getNextPlayerColour());
        
        else
            super.act(marbles);
    }

}

src/model/card/wild/Burner.java
package model.card.wild;

import java.util.ArrayList;

import engine.GameManager;
import engine.board.BoardManager;
import exception.ActionException;
import exception.InvalidMarbleException;
import model.player.Marble;

public class Burner extends Wild {

    public Burner(String name, String description, BoardManager boardManager, GameManager gameManager) {
        super(name, description, boardManager, gameManager);
    }
    
    @Override
    public boolean validateMarbleColours(ArrayList<Marble> marbles) {
        return !super.validateMarbleColours(marbles);
    }

    @Override
    public void act(ArrayList<Marble> marbles) throws ActionException, InvalidMarbleException {
        boardManager.destroyMarble(marbles.get(0));
    }
    
}

src/model/card/wild/Saver.java
package model.card.wild;

import java.util.ArrayList;

import engine.GameManager;
import engine.board.BoardManager;
import exception.ActionException;
import exception.InvalidMarbleException;
import model.player.Marble;

public class Saver extends Wild {

    public Saver(String name, String description, BoardManager boardManager, GameManager gameManager) {
        super(name, description, boardManager, gameManager);
    }

    @Override
    public void act(ArrayList<Marble> marbles) throws ActionException, InvalidMarbleException {
        boardManager.sendToSafe(marbles.get(0));
    }

}

src/model/card/wild/Wild.java

package model.card.wild;

import engine.GameManager;
import engine.board.BoardManager;
import model.card.Card;

public abstract class Wild extends Card {

    public Wild(String name, String description, BoardManager boardManager, GameManager gameManager) {
        super(name, description, boardManager, gameManager);
    }
    
}

src/model/card/Card.java

package model.card;

import java.util.ArrayList;

import engine.GameManager;
import engine.board.BoardManager;
import exception.ActionException;
import exception.InvalidMarbleException;
import model.Colour;
import model.player.Marble;

public abstract class Card {
	private final String name;
    private final String description;
    protected BoardManager boardManager;
    protected GameManager gameManager;

    public Card(String name, String description, BoardManager boardManager, GameManager gameManager) {
        this.name = name;
        this.description = description;
        this.boardManager = boardManager;
        this.gameManager = gameManager;
    }

    public String getName() {
        return name;
    }

    public String getDescription() {
        return description;
    }
    
    public abstract void act(ArrayList<Marble> marbles) throws ActionException, InvalidMarbleException;
    
    public boolean validateMarbleSize(ArrayList<Marble> marbles) {
        return marbles.size() == 1;
    }
    
    public boolean validateMarbleColours(ArrayList<Marble> marbles) {
        Colour ownerColour = gameManager.getActivePlayerColour();
        boolean sameColour = true;
        for (Marble marble : marbles) {
            if (marble.getColour() != ownerColour) {
                sameColour = false;
            }
        }
        return sameColour;
    }
    
}
src/model/card/Deck.java

package model.card;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;

import engine.GameManager;
import engine.board.BoardManager;
import model.card.standard.Ace;
import model.card.standard.Five;
import model.card.standard.Four;
import model.card.standard.Jack;
import model.card.standard.King;
import model.card.standard.Queen;
import model.card.standard.Seven;
import model.card.standard.Standard;
import model.card.standard.Suit;
import model.card.standard.Ten;
import model.card.wild.Burner;
import model.card.wild.Saver;

public class Deck {
    private static final String CARDS_FILE = "Cards.csv";
    static private ArrayList<Card> cardsPool;

    @SuppressWarnings("resource")
	public static void loadCardPool(BoardManager boardManager, GameManager gameManager) throws IOException {
        cardsPool = new ArrayList<>();

		BufferedReader br = new BufferedReader(new FileReader(CARDS_FILE));

		while (br.ready()) {
			String nextLine = br.readLine();
			String[] data = nextLine.split(",");
			
			if (data.length == 0) 
				throw new IOException(nextLine);

            String name = data[2];
            String description = data[3];
			
			int code = Integer.parseInt(data[0]);
			int frequency = Integer.parseInt(data[1]);
			
			for (int i = 0; i < frequency; i++) {
				Card card;
				
				if(code > 13) 
					switch(code) {
						case 14: card = new Burner(name, description, boardManager, gameManager); break;
						case 15: card = new Saver(name, description, boardManager, gameManager); break;
						default: throw new IOException(nextLine);
					}
			
				else {
	                int rank = Integer.parseInt(data[4]);
	                Suit cardSuit = Suit.valueOf(data[5]);
					switch(code) {
						case 0: card = new Standard(name, description, rank, cardSuit, boardManager, gameManager); break;
						case 1: card = new Ace(name, description, cardSuit, boardManager, gameManager); break;
						case 4: card = new Four(name, description, cardSuit, boardManager, gameManager); break;
						case 5: card = new Five(name, description, cardSuit, boardManager, gameManager); break;
						case 7: card = new Seven(name, description, cardSuit, boardManager, gameManager); break;
						case 10: card = new Ten(name, description, cardSuit, boardManager, gameManager); break;
						case 11: card = new Jack(name, description, cardSuit, boardManager, gameManager); break;
						case 12: card = new Queen(name, description, cardSuit, boardManager, gameManager); break;
						case 13: card = new King(name, description, cardSuit, boardManager, gameManager); break;
						default: throw new IOException(nextLine);
					}
				}
				
				cardsPool.add(card);
			}	
        }
    }

    public static ArrayList<Card> drawCards() {
        Collections.shuffle(cardsPool);
        ArrayList<Card> cards = new ArrayList<>(cardsPool.subList(0, 4));
        cardsPool.subList(0, 4).clear();
        return cards;
    }
    
    public static int getPoolSize() {
		return cardsPool.size();
	}

    public static void refillPool(ArrayList<Card> cards) {
        cardsPool.addAll(cards);
    }

}
src/model/player/CPU.java
package model.player;

import java.util.ArrayList;
import java.util.Collections;

import engine.board.BoardManager;
import exception.GameException;
import model.Colour;
import model.card.Card;

public class CPU extends Player {
	private final BoardManager boardManager;

    public CPU(String name, Colour colour, BoardManager boardManager) {
        super(name, colour);
        this.boardManager = boardManager;
    }

    @Override
    public void play() throws GameException {
        // Retrieve a list of actionable marbles from the board manager.
        ArrayList<Marble> actionableMarbles = boardManager.getActionableMarbles();
        
        // Retrieve the current hand of cards and shuffle them to ensure randomness.
        ArrayList<Card> cards = new ArrayList<>();
        cards.addAll(this.getHand());
        int initialHandSize = cards.size();
        Collections.shuffle(cards);
        
        // Iterate through each card in the shuffled hand.
        for (Card card : cards) {
            // Select the card to be played.
            this.selectCard(card);
            
            // Prepare a list to keep track of valid marble counts for the action.
            ArrayList<Integer> counts = new ArrayList<>();
            for(int i = 0; i < 3; i++) { // Check for 0 or 1 or 2 marbles to act upon.
                if(actionableMarbles.size() >= i) {
                    ArrayList<Marble> testMarbles = new ArrayList<>();
                    for(int j = 0; j < i; j++) {
                        testMarbles.add(actionableMarbles.get(j));
                    }
                    
                    // Validate the size of the marble group against the card's rules.
                    if(card.validateMarbleSize(testMarbles)) {
                        counts.add(i);
                    }
                }
            }
            
            // Shuffle the counts to randomize the selection process.
            Collections.shuffle(counts);
            for(int i = 0; i < counts.size(); i++) {   
                if(counts.get(i) == 0) {
                    try {
                        // Attempt to act with no marbles if the count is 0.
                        getSelectedCard().act(new ArrayList<>());
                        return; // Return after successful action.
                    }
                    catch(Exception e) {
                        // Ignore exceptions and continue trying other possibilities.
                    }
                }
                else if(counts.get(i) == 1) {
                    // Attempt to act with one marble.
                    ArrayList<Marble> toSend = new ArrayList<>();
                    Collections.shuffle(actionableMarbles); // Shuffle marbles for random selection.
                    for(Marble marble : actionableMarbles) {
                        toSend.add(marble);
                        if(card.validateMarbleColours(toSend)) {
                            try {
                                getSelectedCard().act(toSend);
                                return; // Return after successful action.
                            }
                            catch(Exception e) {
                                // Ignore exceptions and continue.
                            }
                        }
                        toSend.clear();
                    }
                }
                else {
                    // Attempt to act with two marbles.
                    ArrayList<Marble> toSend = new ArrayList<>();
                    Collections.shuffle(actionableMarbles);
                    for(int j = 0; j < actionableMarbles.size(); j++) {
                        for(int k = j+1; k < actionableMarbles.size(); k++) {
                            toSend.add(actionableMarbles.get(j));
                            toSend.add(actionableMarbles.get(k));
                            if(card.validateMarbleColours(toSend)) {
                                try {
                                    getSelectedCard().act(toSend);
                                    return; // Return after successful action.
                                }
                                catch(Exception e) {
                                    // Ignore exceptions and continue.
                                }
                            }
                            toSend.clear();
                        }
                    }
                }
            }
        }
        
        // If no cards were played, select the first card by default.
        if (cards.size() == initialHandSize)
            this.selectCard(this.getHand().get(0));
    }
    
}
src/model/player/Marble.java
package model.player;

import model.Colour;

public class Marble {

    private final Colour colour;
    
    public Marble(Colour colour) {
        this.colour = colour;
    }

    public Colour getColour() {
        return this.colour;
    }
}
src/model/player/Player.java
package model.player;

import java.util.ArrayList;

import exception.GameException;
import exception.InvalidCardException;
import exception.InvalidMarbleException;
import model.Colour;
import model.card.Card;

@SuppressWarnings("unused")
public class Player {
    private final String name;
    private final Colour colour;
    private ArrayList<Card> hand;
    private final ArrayList<Marble> marbles;
    private Card selectedCard;
	private final ArrayList<Marble> selectedMarbles;

    public Player(String name, Colour colour) {
        this.name = name;
        this.colour = colour;
        this.hand = new ArrayList<>();
        this.selectedMarbles = new ArrayList<>();
        this.marbles = new ArrayList<>();
        
        for (int i = 0; i < 4; i++) {
            this.marbles.add(new Marble(colour));
        }
        
        //default value
        this.selectedCard = null;
    }

    public String getName() {
        return name;
    }

    public Colour getColour() {
        return colour;
    }

    public ArrayList<Card> getHand() {
        return hand;
    }

    public void setHand(ArrayList<Card> hand) {
        this.hand = hand;
    }
    
    public ArrayList<Marble> getMarbles() {
		return marbles;
	}
    
    public Card getSelectedCard() {
        return selectedCard;
    }
    
    public void regainMarble(Marble marble) {
        this.marbles.add(marble);
    }

    public Marble getOneMarble() {
        if(marbles.isEmpty())
            return null;

        return this.marbles.get(0);
    }

    public void selectCard(Card card) throws InvalidCardException {
        if (!this.hand.contains(card)) 
            throw new InvalidCardException("Card not in hand.");
        
        this.selectedCard = card;
    }

    public void selectMarble(Marble marble) throws InvalidMarbleException {
        if (!this.selectedMarbles.contains(marble)) {
            if(this.selectedMarbles.size() > 1)
                throw new InvalidMarbleException("Cannot select more than 2 marbles.");
            
            selectedMarbles.add(marble);
        }
    }

    public void deselectAll() {
        this.selectedCard = null;
        this.selectedMarbles.clear();
    }

    public void play() throws GameException {
        if(selectedCard == null)
            throw new InvalidCardException("Must select a card to play.");
        
        if(!this.selectedCard.validateMarbleSize(this.selectedMarbles))
            throw new InvalidMarbleException("Invalid number of marbles selected for " + selectedCard.getName() + ".");
        
        if(!this.selectedCard.validateMarbleColours(this.selectedMarbles))
            throw new InvalidMarbleException("Invalid marble colours selected for " + selectedCard.getName() + ".");
        
        this.selectedCard.act(this.selectedMarbles);
    }

}


src/model/Colour.java
package model;

public enum Colour {
    GREEN, RED, YELLOW, BLUE
}
, in Android studio using dart language 
